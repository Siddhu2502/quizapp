[
  {
    "question": "What will be the output of the following Java code snippet?",
    "code": "public class Main {\n  public static void main(String[] args) {\n    String s1 = \"hello\";\n    String s2 = new String(\"hello\");\n    System.out.println(s1 == s2);\n  }\n}",
    "options": [
      "true",
      "false",
      "Compilation Error",
      "RuntimeException"
    ],
    "answer": "false",
    "hint": "Consider how `==` works for objects versus primitive types in Java.",
    "explanation": "The `==` operator compares object references, not their content. `s1` refers to a string in the string pool, while `s2` is a new object created in the heap. Since they are different objects in memory, the comparison returns `false`. To compare the content, you should use `s1.equals(s2)`."
  },
  {
    "question": "Which of the following is NOT a Java keyword?",
    "options": [
      "static",
      "try",
      "string",
      "instanceof"
    ],
    "answer": "string",
    "hint": "One of these is a commonly used Class, but not a reserved word in the language.",
    "explanation": "`String` (with a capital S) is a class in the `java.lang` package. `string` (lowercase) is not a keyword. `static`, `try`, and `instanceof` are all reserved keywords in Java."
  },
  {
    "question": "Determine the output of the following Java code snippet.",
    "code": "public class A {\n    public static void main(String argv[]) {\n        int ary[] = new int[]{1,2,3};\n        System.out.println(ary[1]);\n    }\n}",
    "options": [
      "1",
      "2",
      "3",
      "Compilation Error"
    ],
    "answer": "2",
    "hint": "Array indices in Java start from 0.",
    "explanation": "The array 'ary' is initialized with three elements. The element at index 1 is the second element, which is 2."
  },
  {
    "question": "What will be the content of the array variable 'table' after executing the following code?",
    "code": "public class Trial {\n    public static void main(String[] args) {\n        int[][] table = new int[5][5];\n        for(int i = 0; i < 3; i++) {\n            for(int j = 0; j < 3; j++) {\n                if(j == i) {\n                    table[i][j] = 1;\n                } else {\n                    table[i][j] = 0;\n                }\n                System.out.print(table[i][j]);\n            }\n            System.out.println();\n        }\n    }\n}",
    "options": [
      "100\n110\n111",
      "000\n000\n000",
      "100\n010\n001",
      "Compilation error"
    ],
    "answer": "100\n010\n001",
    "hint": "The code prints a 3x3 matrix. A '1' is placed where the row index equals the column index.",
    "explanation": "The code iterates through a 3x3 portion of the 'table' array. When the row index 'i' equals the column index 'j', it assigns 1; otherwise, it assigns 0, effectively creating an identity matrix pattern."
  },
  {
    "question": "Determine the output of the following code.",
    "code": "public class Test {\n    public static void main(String[] args) {\n        int[] x = new int[3];\n        System.out.println(\"x[0] is \" + x[0]);\n    }\n}",
    "options": [
      "The program runs fine and displays x[0] is 0.",
      "The program has a compile error because the array elements are not initialized.",
      "The program has a runtime error because the array elements are not initialized.",
      "The program runs fine and displays x[0] is null."
    ],
    "answer": "The program runs fine and displays x[0] is 0.",
    "hint": "How are numeric arrays initialized by default in Java when using the 'new' keyword?",
    "explanation": "When an array of a primitive numeric type like 'int' is created with the 'new' keyword, its elements are automatically initialized to their default value, which is 0."
  },
  {
    "question": "The '+' operator can be used to concatenate two or more String objects in Java.",
    "options": [
      "True",
      "False",
      "Only for two strings",
      "Only inside a System.out.println statement"
    ],
    "answer": "True",
    "hint": "This is one of the most common ways to join strings in Java.",
    "explanation": "Java overloads the '+' operator for String objects, allowing it to be used for concatenation in addition to its standard arithmetic function for numbers."
  },
  {
    "question": "Predict the output of the following code snippet.",
    "code": "class String_demo {\n    public static void main(String args[]) {\n        char chars[] = {'a', 'b', 'c'};\n        String s = new String(chars);\n        System.out.println(s);\n    }\n}",
    "options": [
      "a",
      "c",
      "abc",
      "[C@..."
    ],
    "answer": "abc",
    "hint": "The String class has a constructor that accepts a character array.",
    "explanation": "A character array `chars` is initialized with 'a', 'b', and 'c'. A new String object `s` is created from this array, which results in the string \"abc\" being printed."
  },
  {
    "question": "Which keyword is used to allocate memory for an array variable in Java?",
    "options": [
      "malloc",
      "calloc",
      "alloc",
      "new"
    ],
    "answer": "new",
    "hint": "This keyword is fundamental for creating objects and arrays in Java.",
    "explanation": "The 'new' keyword is used in Java to dynamically allocate memory for new objects and arrays on the heap."
  },
  {
    "question": "Given a one-dimensional array `arr`, what is the correct way of getting the number of elements in it?",
    "options": [
      "arr.length()",
      "arr.size",
      "arr.length",
      "arr.size()"
    ],
    "answer": "arr.length",
    "hint": "For arrays, the size is a property, not a method.",
    "explanation": "`length` is a public final field (a property) of an array that contains the number of elements in the array. It is not a method, so parentheses are not used."
  },
  {
    "question": "What is the string contained in 's' after the following lines of code are executed?",
    "code": "StringBuffer s = new StringBuffer(\"Hello\");\ns.deleteCharAt(0);",
    "options": [
      "ello",
      "Hel",
      "hell",
      "H"
    ],
    "answer": "ello",
    "hint": "The `deleteCharAt()` method removes the character at a specified index.",
    "explanation": "The `deleteCharAt(0)` method removes the character at index 0, which is 'H', from the StringBuffer. The remaining content of the mutable string is \"ello\"."
  },
  {
    "question": "Is it mandatory to specify the column size when creating a multi-dimensional array in Java?",
    "options": [
      "True",
      "False",
      "Only for arrays of strings",
      "Only if the row size is not specified"
    ],
    "answer": "False",
    "hint": "Consider jagged arrays where each row can have a different number of columns.",
    "explanation": "In Java, only the size of the first dimension (rows) is mandatory. You can create a jagged array where each sub-array (column) is initialized later with a different size."
  },
  {
    "question": "What is the output of the following Java code?",
    "code": "class Output {\n    public static void main(String args[]) {\n        int a1[] = new int[10];\n        int a2[] = {1, 2, 3, 4, 5};\n        System.out.println(a1.length + \" \" + a2.length);\n    }\n}",
    "options": [
      "5 10",
      "10 5",
      "0 5",
      "10 0"
    ],
    "answer": "10 5",
    "hint": "The `length` property reflects the declared size or the number of initializers.",
    "explanation": "Array `a1` is created with a size of 10, so its length is 10. Array `a2` is initialized with 5 elements, so its length is 5."
  },
  {
    "question": "What is the result of attempting to compile and run this code?",
    "code": "public class Trial {\n    public static void main(String[] args) {\n        int arr[4] = {};\n        System.out.print(arr[0]);\n    }\n}",
    "options": [
      "0",
      "Compile time error",
      "Runtime error",
      "Garbage value"
    ],
    "answer": "Compile time error",
    "hint": "This array declaration syntax is not valid in Java.",
    "explanation": "The declaration `int arr[4] = {};` is syntactically incorrect in Java. The size should be specified after the `new` keyword, like `new int[4]`, not in the declaration with the variable name."
  },
  {
    "question": "Predict the output of the following code snippet.",
    "code": "class String_demo {\n    public static void main(String args[]) {\n        int ascii[] = { 65, 66, 67, 68};\n        String s = new String(ascii, 1, 3);\n        System.out.println(s);\n    }\n}",
    "options": [
      "ABC",
      "BCD",
      "CDA",
      "ABCD"
    ],
    "answer": "BCD",
    "hint": "The String constructor `new String(int[] codePoints, int offset, int count)` creates a string from a sub-array of integer ASCII values.",
    "explanation": "A new string `s` is created from the `ascii` array, starting from index 1 and taking 3 elements. The ASCII values 66, 67, and 68 correspond to the characters 'B', 'C', and 'D'."
  },
  {
    "question": "What will s2 contain after the following lines of code execute?",
    "code": "String s1 = \"one\";\nString s2 = s1.concat(\"two\");",
    "options": [
      "twoone",
      "one",
      "onetwo",
      "two"
    ],
    "answer": "onetwo",
    "hint": "The `concat` method appends a string to the end of another string.",
    "explanation": "The `concat(\"two\")` method appends the string \"two\" to the end of `s1` (\"one\"). Since Strings are immutable, a new string \"onetwo\" is created and assigned to `s2`."
  },
  {
    "question": "A programmer needs to make a logging class that uses a string builder thread-safe. How should the code be changed?",
    "code": "public class MyLogger {\n    private StringBuilder logger = new StringBuilder();\n    public void log(String message) {\n        logger.append(message);\n    }\n}",
    "options": [
      "Synchronize the log method",
      "Replace StringBuilder with StringBuffer",
      "No change is necessary, StringBuilder is already thread-safe",
      "Replace StringBuilder with a String object and use +="
    ],
    "answer": "Replace StringBuilder with StringBuffer",
    "hint": "One of these two builder classes is synchronized, and the other is not.",
    "explanation": "StringBuffer is synchronized and therefore thread-safe, making it suitable for multi-threaded environments. StringBuilder is not synchronized but offers better performance in single-threaded scenarios."
  },
  {
    "question": "Consider the following code. How many objects are created in total, how many are in heap memory (outside the pool), and how many are in the string pool?",
    "code": "String st1 = new String(\"JAVA\");\nString st2 = new String(\"JAVA\");\nString st3 = \"JAVA\";",
    "options": [
      "3 objects, 2 in heap memory and 1 in string pool",
      "3 objects, 1 in heap memory and 2 in string pool",
      "2 objects, 1 in heap memory and 1 in string pool",
      "3 objects, 3 in heap memory and 0 in string pool"
    ],
    "answer": "3 objects, 2 in heap memory and 1 in string pool",
    "hint": "Using 'new' creates a new object on the heap, while string literals are placed in the string pool.",
    "explanation": "`st1` and `st2` use `new`, creating two distinct objects on the heap. The literal \"JAVA\" is placed in the string pool once. `st3` references this object in the pool."
  },
  {
    "question": "Which method is used to find the length of a String object in Java?",
    "options": [
      "size()",
      "len",
      "length",
      "length()"
    ],
    "answer": "length()",
    "hint": "Unlike arrays, finding the length of a String is done via a method call.",
    "explanation": "The `String` class provides the `length()` method to return the number of characters in the string. `length` is a property for arrays, not strings."
  },
  {
    "question": "What is the output of the following program?",
    "code": "public class Test {\n    public static void main(String[] args) {\n        int[] x = {1, 2, 3, 4};\n        int[] y = x;\n        x = new int[2];\n        for(int i = 0; i < x.length; i++) {\n            System.out.print(y[i] + \" \");\n        }\n    }\n}",
    "options": [
      "1 2 ",
      "0 0 ",
      "1 2 3 4 ",
      "Compilation Error"
    ],
    "answer": "1 2 ",
    "hint": "Changing where the reference `x` points does not affect the array that `y` is still pointing to.",
    "explanation": "Initially, `y` is assigned the reference of `x`. Then, `x` is reassigned to a new array of size 2. The loop iterates based on the length of the *new* `x` (which is 2), but prints elements from `y`, which still points to the original array {1, 2, 3, 4}. Thus, it prints `y[0]` and `y[1]`."
  },
  {
    "question": "What is the output of the `substring` method in the code below?",
    "code": "String name=\"Sudha learns Oracle\";\nSystem.out.println(name.substring(7,12));",
    "options": [
      "learns",
      "learn",
      " earns",
      "earns"
    ],
    "answer": "earns",
    "hint": "The `substring(beginIndex, endIndex)` method extracts characters from `beginIndex` up to, but not including, `endIndex`.",
    "explanation": "The method extracts the substring starting at index 7 ('e') and ending before index 12 ('s'), resulting in the string \"earns\"."
  },
  {
    "question": "What will the following code print?",
    "code": "String emailId=\"john#global.com\";\nSystem.out.println(emailId.indexOf('@'));",
    "options": [
      "0",
      "-1",
      "14",
      "An exception is thrown"
    ],
    "answer": "-1",
    "hint": "The `indexOf` method returns a specific value when the character is not found.",
    "explanation": "The `indexOf` method searches for the specified character. Since '@' is not present in the string \"john#global.com\", the method returns -1."
  },
  {
    "question": "What will be the output of the following code snippet?",
    "code": "String course=\"Java Programming\";\nchar c=course.charAt(16);",
    "options": [
      "ArrayIndexOutOfBoundsException",
      "StringIndexOutOfBoundsException",
      "g",
      "Compilation error"
    ],
    "answer": "StringIndexOutOfBoundsException",
    "hint": "The valid indices for a string of length N are 0 to N-1.",
    "explanation": "The string \"Java Programming\" has a length of 16, so its valid indices are 0 to 15. Attempting to access the character at index 16 results in a `StringIndexOutOfBoundsException`."
  },
  {
    "question": "Which of the following is NOT a valid Java modifier?",
    "options": [
      "public",
      "protected",
      "virtual",
      "private"
    ],
    "answer": "virtual",
    "hint": "This keyword is used in other languages like C++ for polymorphism, but not in Java.",
    "explanation": "Java uses `public`, `protected`, `private`, and the default (package-private) access modifiers. The `virtual` keyword is not a modifier in the Java language."
  },
  {
    "question": "What is the output of the following code, given the command line invocation `java Sample`?",
    "code": "public class Sample {\n    public static void main(String[] args) {\n        int x = 6;\n        Sample p = new Sample();\n        p.display(x);\n        System.out.print(\" main x = \" + x);\n    }\n    void display(int x) {\n        System.out.print(\" display x = \" + x++);\n    }\n}",
    "options": [
      "display x = 7 main x = 6",
      "display x = 6 main x = 7",
      "display x = 7 main x = 7",
      "display x = 6 main x = 6"
    ],
    "answer": "display x = 6 main x = 6",
    "hint": "Java passes primitive types by value, and `x++` is a post-increment operator.",
    "explanation": "The primitive `int x` is passed by value to the `display` method. Inside `display`, the post-increment `x++` prints the original value (6) before incrementing the local copy. The original `x` in `main` remains unchanged."
  },
  {
    "question": "What is the output of this code?",
    "code": "Integer x1 = new Integer(120);\nint x2 = 120;\nSystem.out.println(x1 == x2);",
    "options": [
      "true",
      "false",
      "Compilation Error",
      "Runtime Exception"
    ],
    "answer": "true",
    "hint": "Consider how Java handles comparisons between wrapper objects and primitives.",
    "explanation": "When a wrapper type object (like `Integer`) is compared to a primitive type (like `int`) using `==`, the wrapper object is unboxed to its primitive value. Therefore, the comparison becomes `120 == 120`, which is true."
  },
  {
    "question": "A method in a class in package `p1` needs to be accessed by a class in package `p2`. What must be the access specifier for that method?",
    "options": [
      "private",
      "default",
      "protected",
      "public"
    ],
    "answer": "public",
    "hint": "Which access level provides the least restriction?",
    "explanation": "For a member of a class to be accessible from any other class in any other package, it must be declared `public`."
  },
  {
    "question": "What is the correct order of elements in a Java source file?",
    "options": [
      "import, package, class",
      "class, import, package",
      "package, import, class",
      "package, class, import"
    ],
    "answer": "package, import, class",
    "hint": "The package declaration must always come first.",
    "explanation": "A Java source file must follow a strict order: an optional `package` declaration first, followed by any `import` statements, and finally the class and/or interface declarations."
  },
  {
    "question": "The regular expression meta-character `\\B` matches 'a non-word boundary'.",
    "options": [
      "True",
      "False",
      "It matches both word and non-word boundaries",
      "It matches the beginning of a word"
    ],
    "answer": "True",
    "hint": "`\\b` matches a word boundary. What does its uppercase counterpart do?",
    "explanation": "`\\B` is the negated version of `\\b`. It matches any position where `\\b` does not match, which is a position that is not at the beginning or end of a word."
  },
  {
    "question": "What is the regular expression to match a whitespace character in a string?",
    "options": [
      "\\w",
      "\\s",
      "\\d",
      "\\W"
    ],
    "answer": "\\s",
    "hint": "Think of 's' for space.",
    "explanation": "The metacharacter `\\s` is a shorthand character class that matches any whitespace character, including spaces, tabs, and newlines."
  },
  {
    "question": "What will be the output of the following code?",
    "code": "import java.util.regex.*;\n\npublic class TestRegEx {\n    public static void main(String args[]) {\n        Pattern p = Pattern.compile(\".ech\");\n        Matcher m = p.matcher(\"tech\");\n        boolean b = m.matches();\n        System.out.println(b);\n    }\n}",
    "options": [
      "false",
      "true",
      "Runtime Error",
      "compile time error"
    ],
    "answer": "true",
    "hint": "The dot `.` in a regular expression matches any single character.",
    "explanation": "The pattern `.ech` matches any single character followed by \"ech\". The string \"tech\" fits this pattern perfectly, so the `matches()` method returns true."
  },
  {
    "question": "Which is the correct regular expression to match an email address like 'user@domain.com'?",
    "options": [
      "[A-Za-z0-9]+",
      "\\w+@\\w+\\.\\w+",
      "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}",
      "\\d+@\\d+\\.\\d+"
    ],
    "answer": "[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}",
    "hint": "A robust email regex needs to account for various characters in the username, domain, and a top-level domain of at least two letters.",
    "explanation": "This regex correctly models the structure of an email: a local part with allowed characters, an '@' symbol, a domain name with allowed characters, a dot, and a top-level domain of two or more letters."
  },
  {
    "question": "What is the correct regular expression to match any date in the format 'yyyy-mm-dd'?",
    "options": [
      "\\d{2}/\\d{2}/\\d{4}",
      "\\d{4}-\\d{2}-\\d{2}",
      "\\d{2}-\\d{2}-\\d{4}",
      "\\d{4}/\\d{2}/\\d{2}"
    ],
    "answer": "\\d{4}-\\d{2}-\\d{2}",
    "hint": "`\\d` matches a digit, and `{n}` specifies the quantity.",
    "explanation": "The regex `\\d{4}-\\d{2}-\\d{2}` specifically matches a sequence of four digits, a hyphen, two digits, a hyphen, and two final digits, which is the 'yyyy-mm-dd' format."
  },
  {
    "question": "Which text will return true when matched with the regular expression `[a-zA-Z&&[^aeiou]]+`?",
    "options": [
      "cry",
      "must",
      "Good",
      "aeiou"
    ],
    "answer": "cry",
    "hint": "The regex is looking for one or more characters that are letters AND are NOT lowercase vowels.",
    "explanation": "The character class `[a-zA-Z&&[^aeiou]]` matches any character that is a letter (a-z, A-Z) but is not a lowercase vowel (a, e, i, o, u). 'cry' consists only of such characters. 'must' and 'Good' contain vowels."
  },
  {
    "question": "Consider a class `Student` with a constructor that accepts an id, name, and mark. This constructor then calls a method within the class to calculate the grade. Is this valid?",
    "code": "public class Student {\n    //... fields\n    public Student(int id, String name, float mark) {\n        this.id = id;\n        this.name = name;\n        calculateGrade(mark);\n    }\n    public void calculateGrade(float mark) {\n        //... logic\n    }\n}",
    "options": [
      "Compiles successfully",
      "Compilation error because methods cannot be called from a constructor",
      "Runtime error because the object is not fully constructed",
      "Compilation error because of the parameter name 'mark'"
    ],
    "answer": "Compiles successfully",
    "hint": "Constructors are special methods, but they can still invoke other methods of the same class.",
    "explanation": "It is perfectly valid to call other methods of the same class from within a constructor. The code will compile and run without errors."
  },
  {
    "question": "How can a parameterized constructor invoke the no-argument constructor of the same class?",
    "options": [
      "Product()",
      "super()",
      "new Product()",
      "this()"
    ],
    "answer": "this()",
    "hint": "This keyword has a special use when called as a method.",
    "explanation": "The `this()` call is used to invoke another constructor within the same class. It must be the very first statement in the constructor body."
  },
  {
    "question": "Which statement accurately describes the access capabilities of static and non-static methods?",
    "options": [
      "Static methods can access both static and non-static members.",
      "Non-static methods can only access non-static members.",
      "Static methods can only access static members; non-static methods can access both.",
      "Neither method type can access the other's members."
    ],
    "answer": "Static methods can only access static members; non-static methods can access both.",
    "hint": "Static members belong to the class, while non-static (instance) members belong to an object.",
    "explanation": "Static methods don't have an associated object instance (`this`), so they cannot access instance variables or methods directly. Non-static methods have an instance, so they can access both instance members and class-level (static) members."
  },
  {
    "question": "A static variable is incremented in a class's constructor. What is the output after creating three objects and printing the variable each time?",
    "code": "class Product {\n    static int count = 0;\n    public Product() {\n        count++;\n        System.out.println(\"Count is \" + count);\n    }\n}\n// in main:\nnew Product();\nnew Product();\nnew Product();",
    "options": [
      "Count is 1, Count is 1, Count is 1",
      "Count is 1, Count is 2, Count is 3",
      "Count is 0, Count is 1, Count is 2",
      "Compilation Error"
    ],
    "answer": "Count is 1, Count is 2, Count is 3",
    "hint": "Static variables are shared among all instances of a class.",
    "explanation": "The `count` variable is static, so there is only one copy for the `Product` class. Each time the constructor is called, this single variable is incremented, leading to the sequence 1, 2, 3."
  },
  {
    "question": "What happens when a class tries to access a private member of another class?",
    "code": "class Sample {\n    private double num = 100;\n}\nclass Test {\n    public static void main(String args[]) {\n        Sample obj = new Sample();\n        System.out.println(obj.num);\n    }\n}",
    "options": [
      "Run time error",
      "Executes but no output",
      "100.0",
      "Compile time error"
    ],
    "answer": "Compile time error",
    "hint": "The `private` access specifier is the most restrictive.",
    "explanation": "A member declared as `private` is only accessible within its own class. The `Test` class cannot access the private member `num` of the `Sample` class, causing a compilation error."
  },
  {
    "question": "Moving an existing Eclipse project to another location by compressing it is known as...",
    "options": [
      "Exporting",
      "Importing",
      "Archiving",
      "Compressing"
    ],
    "answer": "Exporting",
    "hint": "This action prepares a project to be moved or shared.",
    "explanation": "In Eclipse, the 'Export' feature is used to package a project, often into an archive file like a ZIP, so it can be moved and then imported into another workspace."
  },
  {
    "question": "What is the name of the standard Eclipse plugin needed for Java Development?",
    "options": [
      "CDT (C/C++ Development Tooling)",
      "PyDev",
      "JDT (Java Development Tools)",
      "JavaPlugin"
    ],
    "answer": "JDT (Java Development Tools)",
    "hint": "The acronym stands for Java Development Tools.",
    "explanation": "JDT is the core plugin for Eclipse that provides all the essential tools for Java development, including the editor, compiler, debugger, and project management features."
  },
  {
    "question": "What is the result of the following code snippet in Java?",
    "code": "int a = 0;\nif (a) {\n    System.out.println(\"Hello\");\n} else {\n    System.out.println(\"Hai\");\n}",
    "options": [
      "Hello",
      "Hai",
      "Compilation Fails",
      "Runtime Error"
    ],
    "answer": "Compilation Fails",
    "hint": "The condition in an `if` statement must evaluate to a specific data type in Java.",
    "explanation": "In Java, the condition of an `if` statement must be a boolean value (true or false). An integer like 0 cannot be used as a condition, unlike in some other languages like C/C++. This results in a compilation error."
  },
  {
    "question": "Which Java edition is primarily used for developing web and enterprise applications?",
    "options": [
      "J2ME (Micro Edition)",
      "J2SE (Standard Edition)",
      "J2EE (Enterprise Edition)",
      "JavaFX"
    ],
    "answer": "J2EE (Enterprise Edition)",
    "hint": "The 'E' stands for Enterprise.",
    "explanation": "J2EE (now Jakarta EE) provides a platform and APIs for developing and running large-scale, multi-tiered, and reliable server-side applications, including web applications."
  },
  {
    "question": "Which component of the Java platform is responsible for generating byte code from a .java source file?",
    "options": [
      "JRE (Java Runtime Environment)",
      "JVM (Java Virtual Machine)",
      "JDK (Java Development Kit)",
      "JIT (Just-In-Time Compiler)"
    ],
    "answer": "JDK (Java Development Kit)",
    "hint": "Which package includes the compiler (`javac`)?",
    "explanation": "The JDK contains all the tools necessary for developing Java applications, including the `javac` compiler, which translates .java source files into .class files containing Java bytecode."
  },
  {
    "question": "Which component is responsible for executing Java byte code?",
    "options": [
      "JRE (Java Runtime Environment)",
      "JVM (Java Virtual Machine)",
      "JDK (Java Development Kit)",
      "The Operating System"
    ],
    "answer": "JVM (Java Virtual Machine)",
    "hint": "This component is the cornerstone of Java's 'write once, run anywhere' philosophy.",
    "explanation": "The JVM is an abstract computing machine that enables a computer to run a Java program. It interprets the compiled Java bytecode and executes it."
  },
  {
    "question": "What is the output of this program, which demonstrates switch fall-through?",
    "code": "for(int i = 0; i < 3; i++) {\n    switch(i) {\n        case 0: break;\n        case 1: System.out.print(\"one \");\n        case 2: System.out.print(\"two \");\n        case 3: System.out.print(\"three \");\n    }\n}\nSystem.out.println(\"done\");",
    "options": [
      "one two three done",
      "one two two three done",
      "one two three two three done",
      "done"
    ],
    "answer": "one two three two three done",
    "hint": "Execution continues to the next case if a `break` statement is not present.",
    "explanation": "When i=1, it prints 'one ', then falls through to case 2 and prints 'two ', then to case 3 and prints 'three '. When i=2, it starts at case 2, prints 'two ', then falls through to case 3 and prints 'three '. The final output concatenates these results followed by 'done'."
  },
  {
    "question": "What happens when this code is compiled in Java?",
    "code": "int i = 1;\nswitch (i) {\n    case 0, 1: System.out.println(\"A\"); break; // Line 3\n    case 2: System.out.println(\"B\"); break;\n}",
    "options": [
      "It prints A",
      "It prints B",
      "Compilation fails",
      "Runtime error"
    ],
    "answer": "Compilation fails",
    "hint": "Java has a specific syntax for handling multiple values for a single block of code in a switch statement, but this isn't it (in older versions).",
    "explanation": "The comma-separated syntax `case 0, 1:` is not valid in Java versions before Java 12. For older versions, each case label must be specified separately (e.g., `case 0: case 1:`). This code will cause a compilation error."
  },
  {
    "question": "What is the output of this program?",
    "code": "class selection_statements {\n    public static void main(String args[]) {\n        int var1 = 5;\n        int var2 = 6;\n        if ((var2 = 1) == var1) {\n            System.out.print(var2);\n        } else {\n            System.out.print(++var2);\n        }\n    }\n}",
    "options": [
      "1",
      "2",
      "6",
      "7"
    ],
    "answer": "2",
    "hint": "The expression inside the `if` condition performs an assignment first, then a comparison. Note the pre-increment in the `else` block.",
    "explanation": "First, `var2` is assigned the value 1. The condition then becomes `1 == 5`, which is false. The `else` block is executed. `++var2` pre-increments `var2` (which is currently 1) to 2, and then prints it."
  },
  {
    "question": "What is the primary characteristic of the Java programming language?",
    "options": [
      "Platform dependent",
      "Platform independent",
      "Procedural",
      "Functional only"
    ],
    "answer": "Platform independent",
    "hint": "Think of the 'Write Once, Run Anywhere' slogan.",
    "explanation": "Java achieves platform independence through the Java Virtual Machine (JVM). Java code is compiled into bytecode, which can be executed by any JVM, regardless of the underlying operating system or hardware."
  },
  {
    "question": "Who is known as the 'father of Java'?",
    "options": [
      "James Gosling",
      "Dennis Ritchie",
      "Bjarne Stroustrup",
      "Guido van Rossum"
    ],
    "answer": "James Gosling",
    "hint": "He initiated the Java language project at Sun Microsystems.",
    "explanation": "James Gosling is a Canadian computer scientist, best known as the founder and lead designer behind the Java programming language."
  },
  {
    "question": "What is the primary purpose of Wrapper classes in Java?",
    "options": [
      "To make primitive data types run faster",
      "To allow primitive data types to be treated as objects",
      "To provide extra mathematical functions",
      "To secure primitive data types"
    ],
    "answer": "To allow primitive data types to be treated as objects",
    "hint": "Consider why you can't put an `int` directly into an `ArrayList`.",
    "explanation": "Wrapper classes (like Integer, Double, Boolean) 'wrap' primitive values in an object, allowing them to be used in contexts that require objects, such as Java's Collection Framework."
  },
  {
    "question": "Which of the following loops will always execute its body at least once?",
    "options": [
      "for",
      "while",
      "enhanced for",
      "do-while"
    ],
    "answer": "do-while",
    "hint": "Which loop checks its condition after the loop body has run?",
    "explanation": "A do-while loop executes the code block first and then checks the condition. This guarantees that the loop body is executed at least one time, even if the condition is initially false."
  },
  {
    "question": "What was the initial name for the Java programming language?",
    "options": [
      "C++--",
      "GreenTalk",
      "The Oak",
      "Latte"
    ],
    "answer": "The Oak",
    "hint": "The name was inspired by a tree outside James Gosling's office.",
    "explanation": "Before being renamed to Java, the language was developed under the name 'The Oak', inspired by an oak tree that stood outside the developers' window."
  },
  {
    "question": "What value is stored in `i` at the end of this loop?",
    "code": "int i = 0;\nfor (i = 1; i <= 10; i++) {\n    // loop body\n}",
    "options": [
      "9",
      "10",
      "11",
      "The variable is out of scope"
    ],
    "answer": "11",
    "hint": "The loop terminates when the condition `i <= 10` becomes false.",
    "explanation": "The loop continues as long as `i` is less than or equal to 10. In the last iteration, `i` is 10. The increment part `i++` then runs, making `i` become 11. The condition `11 <= 10` is checked and found to be false, causing the loop to terminate. The value of `i` after the loop is 11."
  },
  {
    "question": "What is the result of this code snippet, demonstrating String immutability?",
    "code": "String text = \"java\";\ntext.toUpperCase();\nSystem.out.println(text);",
    "options": [
      "java",
      "JAVA",
      "null",
      "Compilation Error"
    ],
    "answer": "java",
    "hint": "String objects in Java cannot be changed after they are created.",
    "explanation": "The `toUpperCase()` method does not modify the original string. Instead, it returns a new string, which is not assigned back to the `text` variable. Thus, the original value of `text` is printed."
  },
  {
    "question": "Which statement best describes a static block in Java?",
    "options": [
      "It is executed every time an object of the class is created.",
      "It is executed only once when the class is loaded into memory.",
      "It can only be placed inside the main method.",
      "It is used to initialize non-static instance variables."
    ],
    "answer": "It is executed only once when the class is loaded into memory.",
    "hint": "Think about when class-level information is needed for the first time.",
    "explanation": "A static block is used for static initialization of a class. The code inside the static block is executed only once, the first time the class is loaded by the JVM."
  },
  {
    "question": "In regular expressions, what does the `^` metacharacter signify when used at the beginning of a pattern?",
    "options": [
      "Matches the end of the string.",
      "Matches any single character except a newline.",
      "Negates the character class that follows.",
      "Matches the beginning of the string."
    ],
    "answer": "Matches the beginning of the string.",
    "hint": "This is often referred to as an anchor.",
    "explanation": "The caret `^` is an anchor that asserts the position at the start of the string. For example, the pattern `^A` would match 'Apple' but not 'Banana'."
  },
  {
    "question": "What is the purpose of the `Scanner` class in Java?",
    "options": [
      "To scan for viruses in a file.",
      "To parse text using regular expressions.",
      "To obtain primitive type input from a user or a file.",
      "To scan the classpath for other .class files."
    ],
    "answer": "To obtain primitive type input from a user or a file.",
    "hint": "It's commonly used with `System.in` for console input.",
    "explanation": "The `Scanner` class, found in the `java.util` package, is used to get user input and parse text for primitive values like `int`, `double`, and `String`."
  },
  {
    "question": "What will be the output of the following Java code?",
    "code": "public class Test {\n    public static void main(String[] args) {\n        String s1 = new String(\"Hello\");\n        String s2 = new String(\"Hello\");\n        System.out.println(s1 == s2);\n    }\n}",
    "options": [
      "true",
      "false",
      "Compilation Error",
      "Hello"
    ],
    "answer": "false",
    "hint": "The `==` operator compares object references, not their content.",
    "explanation": "Since `s1` and `s2` are created using the `new` keyword, they are two different objects in memory, each with its own address. The `==` operator checks if the references are the same, which they are not, so it returns false."
  },

  {
    "question": "Which keyboard shortcut is commonly used in Eclipse to format the source code automatically?",
    "options": [
      "Ctrl + S",
      "Ctrl + F",
      "Ctrl + Shift + F",
      "Ctrl + Shift + O"
    ],
    "answer": "Ctrl + Shift + F",
    "hint": "This shortcut helps in maintaining consistent code style and indentation.",
    "explanation": "`Ctrl + Shift + F` is the default shortcut in Eclipse to format the selected code or the entire file according to the configured code style preferences."
  },
  {
    "question": "What does the 'ternary operator' in Java do?",
    "options": [
      "Performs a bitwise operation on three operands.",
      "A shorthand for an if-then-else statement.",
      "Defines a method with three parameters.",
      "Compares three variables for equality."
    ],
    "answer": "A shorthand for an if-then-else statement.",
    "hint": "It has the syntax `condition ? value_if_true : value_if_false`.",
    "explanation": "The ternary operator `?:` is a conditional operator that provides a concise way to write a simple if-then-else statement. It evaluates a boolean condition and returns one of two values."
  },
  {
    "question": "What is the output of the following code snippet that uses the `continue` statement?",
    "code": "for (int i = 1; i <= 5; i++) {\n    if (i == 3) {\n        continue;\n    }\n    System.out.print(i + \" \");\n}",
    "options": [
      "1 2 4 5 ",
      "1 2 ",
      "1 2 3 4 5 ",
      "1 2 5 "
    ],
    "answer": "1 2 4 5 ",
    "hint": "The `continue` statement skips the current iteration of a loop.",
    "explanation": "When the loop variable `i` becomes 3, the `continue` statement is executed. This skips the rest of the loop body for that iteration (the `System.out.print` call) and proceeds to the next iteration where `i` is 4."
  },
  {
    "question": "What is the main difference between `StringBuilder` and `StringBuffer`?",
    "options": [
      "StringBuilder is for numbers, StringBuffer is for text.",
      "StringBuilder is faster and not thread-safe, while StringBuffer is synchronized and thread-safe.",
      "StringBuilder can be extended, StringBuffer cannot.",
      "There is no difference; they are interchangeable."
    ],
    "answer": "StringBuilder is faster and not thread-safe, while StringBuffer is synchronized and thread-safe.",
    "hint": "The difference lies in how they handle concurrent access in multi-threaded environments.",
    "explanation": "Both classes create mutable strings. However, `StringBuffer` methods are synchronized, making it safe for use by multiple threads, which adds a performance overhead. `StringBuilder` is not synchronized and is thus faster for single-threaded applications."
  },
  {
    "question": "What is a jagged array in Java?",
    "options": [
      "An array where elements are stored in a random order.",
      "A two-dimensional array where each row has a different number of columns.",
      "An array that can only hold String objects.",
      "An array whose size cannot be determined at compile time."
    ],
    "answer": "A two-dimensional array where each row has a different number of columns.",
    "hint": "It's an array of arrays, where the inner arrays can have varying lengths.",
    "explanation": "A jagged array is a multi-dimensional array in which the member arrays can be of different sizes. This allows for more flexible and memory-efficient data structures."
  },
  {
    "question": "Which of these data types is allowed in a `switch` statement in modern Java?",
    "options": [
      "long",
      "double",
      "String",
      "boolean"
    ],
    "answer": "String",
    "hint": "Support for this type was added in Java 7. Floating-point types are not allowed.",
    "explanation": "Java `switch` statements support `byte`, `short`, `char`, `int`, their wrapper types, `enum` types, and, since Java 7, `String` objects."
  },
  {
    "question": "In regular expressions, what does the quantifier `{3}` mean?",
    "options": [
      "Matches the preceding element at least 3 times.",
      "Matches the preceding element exactly 3 times.",
      "Matches the preceding element at most 3 times.",
      "Matches the character '3'."
    ],
    "answer": "Matches the preceding element exactly 3 times.",
    "hint": "Curly braces are used to specify an exact number of occurrences.",
    "explanation": "The quantifier `{n}` specifies that the preceding character or group must occur exactly `n` times. For example, `\\d{3}` matches exactly three digits."
  },
  {
    "question": "What is the result of running this code?",
    "code": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(args.length);\n    }\n}\n// Command line: java Main hello world",
    "options": [
      "0",
      "1",
      "2",
      "An exception is thrown."
    ],
    "answer": "2",
    "hint": "Command-line arguments are passed into the `main` method as an array of strings.",
    "explanation": "The words 'hello' and 'world' provided after the class name on the command line are passed as two separate elements into the `String[] args` array. Therefore, the length of the array is 2."
  },
  {
    "question": "The process by which the JVM automatically reclaims memory occupied by objects that are no longer in use is called?",
    "options": [
      "Memory Allocation",
      "Garbage Collection",
      "Stack Unwinding",
      "Heap Compaction"
    ],
    "answer": "Garbage Collection",
    "hint": "This is a key feature of Java that helps prevent memory leaks.",
    "explanation": "Garbage Collection is the automated process of managing memory in Java. The garbage collector identifies and discards objects that are no longer accessible by the program, freeing up their memory."
  },
  {
    "question": "In Eclipse, what is a 'Perspective'?",
    "options": [
      "The color theme of the editor.",
      "A collection of views and editors arranged for a specific task.",
      "A type of project, like a Java Project or a Web Project.",
      "The version of the Java compiler being used."
    ],
    "answer": "A collection of views and editors arranged for a specific task.",
    "hint": "Common examples include the 'Java' perspective and the 'Debug' perspective.",
    "explanation": "A perspective in Eclipse defines the initial set and layout of views in the Workbench window. For example, the Java perspective is tailored for writing code, while the Debug perspective is arranged for debugging it."
  },
  {
    "question": "What will the following code print?",
    "code": "StringBuilder sb = new StringBuilder(\"start\");\nsb.insert(2, \"xx\");\nSystem.out.println(sb);",
    "options": [
      "staxxrt",
      "stxxart",
      "xxstart",
      "startxx"
    ],
    "answer": "stxxart",
    "hint": "The `insert` method adds characters at a specific index, shifting existing characters.",
    "explanation": "The code inserts the string \"xx\" into the `StringBuilder` at index 2. The original characters 'a', 'r', 't' are shifted to the right, resulting in the string \"stxxart\"."
  },
  {
    "question": "Which of the following is a correct way to declare and initialize a 2D array in Java?",
    "options": [
      "int matrix[,] = {{1,2}, {3,4}};",
      "int[][] matrix = new int[2,2];",
      "int matrix[][] = {{1,2}, {3,4}};",
      "int matrix[2][2] = {1,2,3,4};"
    ],
    "answer": "int matrix[][] = {{1,2}, {3,4}};",
    "hint": "Java uses curly braces for array initializers and square brackets after the type or variable name.",
    "explanation": "Both `int[][] matrix = ...` and `int matrix[][] = ...` are valid declaration syntaxes. The initializer `{{1,2}, {3,4}}` correctly creates a 2x2 array."
  },
  {
    "question": "What is the return type of the `.equals()` method of the `String` class?",
    "options": [
      "int",
      "String",
      "Object",
      "boolean"
    ],
    "answer": "boolean",
    "hint": "This method is used for comparison, so it should indicate a true or false result.",
    "explanation": "The `String.equals(Object anObject)` method compares the character sequence of two strings for equality and returns `true` if they are the same, and `false` otherwise."
  },
  {
    "question": "Which `java.util.regex.Matcher` method attempts to find the next subsequence of the input that matches the pattern?",
    "options": [
      "matches()",
      "lookingAt()",
      "find()",
      "next()"
    ],
    "answer": "find()",
    "hint": "This method can be called multiple times to find all occurrences of a pattern in a string.",
    "explanation": "The `find()` method scans the input sequence looking for the next subsequence that matches the pattern. In contrast, `matches()` attempts to match the entire input sequence against the pattern."
  },
  {
    "question": "What is 'autoboxing' in Java?",
    "options": [
      "The automatic creation of a `try-catch` block.",
      "The automatic conversion of a primitive type to its corresponding wrapper class.",
      "The automatic packaging of a project into a JAR file.",
      "The automatic generation of getter and setter methods."
    ],
    "answer": "The automatic conversion of a primitive type to its corresponding wrapper class.",
    "hint": "This feature simplifies code by eliminating the need to manually create wrapper objects.",
    "explanation": "Autoboxing is the process where the Java compiler automatically converts a primitive type (e.g., `int`) into its corresponding object wrapper class (e.g., `Integer`) when an object is required."
  },
  {
    "question": "What is the value of `z` after this code executes?",
    "code": "int x = 5;\nint y = 10;\nint z = x > y ? x : y;",
    "options": [
      "5",
      "10",
      "0",
      "The code will not compile."
    ],
    "answer": "10",
    "hint": "This is an example of the ternary operator being used to find the maximum of two numbers.",
    "explanation": "The condition `x > y` (5 > 10) is false. Therefore, the ternary operator evaluates to the second expression, `y`, which is 10. This value is then assigned to `z`."
  },
  {
    "question": "Which String method removes leading and trailing whitespace?",
    "options": [
      "strip()",
      "trim()",
      "clean()",
      "removeWhitespace()"
    ],
    "answer": "trim()",
    "hint": "This method is useful for cleaning up user input.",
    "explanation": "The `trim()` method returns a copy of the string, with leading and trailing whitespace omitted. The `strip()` method is similar but is Unicode-aware."
  },
  {
    "question": "What is the purpose of the `package` keyword in Java?",
    "options": [
      "To create a compressed archive file (like a JAR).",
      "To declare a namespace that organizes a set of related classes and interfaces.",
      "To specify the version of the Java compiler to use.",
      "To include external libraries in the current file."
    ],
    "answer": "To declare a namespace that organizes a set of related classes and interfaces.",
    "hint": "It helps in avoiding naming conflicts and controlling access.",
    "explanation": "A package is a grouping of related types providing access protection and namespace management. The `package` statement must be the first line in a Java source file."
  },
  {
    "question": "In regular expressions, what does `[aeiou]` represent?",
    "options": [
      "The literal string \"[aeiou]\".",
      "Matches any character that is 'a', 'e', 'i', 'o', or 'u'.",
      "Matches any character that is NOT a vowel.",
      "Matches the sequence of characters 'aeiou'."
    ],
    "answer": "Matches any character that is 'a', 'e', 'i', 'o', or 'u'.",
    "hint": "Square brackets define a set of characters to match.",
    "explanation": "`[aeiou]` is a character class (or character set) that will match any single character that is present within the brackets. It will match 'a', 'e', 'i', 'o', or 'u'."
  },
  {
    "question": "What is the output of the following code?",
    "code": "class Test {\n    public Test() {\n        System.out.print(\"A\");\n    }\n    public Test(int i) {\n        this();\n        System.out.print(\"B\");\n    }\n    public static void main(String[] args) {\n        new Test(10);\n    }\n}",
    "options": [
      "A",
      "B",
      "AB",
      "BA"
    ],
    "answer": "AB",
    "hint": "The `this()` call invokes another constructor from the same class.",
    "explanation": "Creating `new Test(10)` calls the parameterized constructor. Its first line is `this()`, which calls the no-argument constructor, printing 'A'. After that returns, the rest of the parameterized constructor executes, printing 'B'."
  },
  {
    "question": "Which of these is NOT a primitive data type in Java?",
    "options": [
      "int",
      "float",
      "boolean",
      "String"
    ],
    "answer": "String",
    "hint": "One of these is a class, not a basic, built-in type.",
    "explanation": "`int`, `float`, and `boolean` are all primitive data types in Java. `String` is a reference type; it is a class provided in the `java.lang` package."
  },
  {
    "question": "If a class does not have an explicitly defined constructor, what happens when you try to create an object of that class?",
    "options": [
      "A compilation error occurs.",
      "A runtime error occurs.",
      "The Java compiler provides a default, no-argument constructor.",
      "The object is created but its fields are not initialized."
    ],
    "answer": "The Java compiler provides a default, no-argument constructor.",
    "hint": "Java ensures that every class has at least one constructor.",
    "explanation": "If a programmer does not supply any constructor for a class, the compiler will automatically add a public, no-argument constructor known as the default constructor."
  },
  {
    "question": "What is the output of this bitwise operation?",
    "code": "System.out.println(5 & 3);",
    "options": [
      "1",
      "2",
      "3",
      "5"
    ],
    "answer": "1",
    "hint": "The `&` operator is a bitwise AND. Convert the numbers to binary first.",
    "explanation": "In binary, 5 is `101` and 3 is `011`. The bitwise AND operation (`&`) results in `001`, where a bit is set to 1 only if it's 1 in both operands. The decimal representation of `001` is 1."
  },
  {
    "question": "Which of these statements about final variables is true?",
    "options": [
      "A final variable can only be of a primitive type.",
      "A final variable can be assigned a value multiple times.",
      "A final variable can only be initialized at the time of declaration.",
      "A final variable's value cannot be changed once it has been initialized."
    ],
    "answer": "A final variable's value cannot be changed once it has been initialized.",
    "hint": "The `final` keyword is used to create constants.",
    "explanation": "The `final` keyword makes a variable a constant, meaning its value can be assigned only once, either at declaration or within the constructor. Any subsequent attempt to change it will result in a compilation error."
  },
  {
    "question": "What does the `String.split(\",\")` method do?",
    "options": [
      "It concatenates the string with a comma.",
      "It checks if the string contains a comma.",
      "It splits the string into an array of substrings based on the comma delimiter.",
      "It replaces all commas in the string with spaces."
    ],
    "answer": "It splits the string into an array of substrings based on the comma delimiter.",
    "hint": "This method is useful for parsing comma-separated values (CSV).",
    "explanation": "The `split()` method takes a regular expression as a delimiter and breaks the string into an array of strings. `split(\",\")` would turn \"a,b,c\" into the array `[\"a\", \"b\", \"c\"]`."
  },
  {
    "question": "In the Eclipse IDE, what is the 'Console' view primarily used for?",
    "options": [
      "Editing source code files.",
      "Navigating the project's file structure.",
      "Displaying the standard output (`System.out`) and standard error of a running application.",
      "Listing all compilation errors and warnings."
    ],
    "answer": "Displaying the standard output (`System.out`) and standard error of a running application.",
    "hint": "When you use `System.out.println()`, where does the output appear?",
    "explanation": "The Console view in Eclipse is the standard place to see program output, error messages, and to provide keyboard input when using `System.in`."
  },
  {
    "question": "What is the correct syntax for a static import in Java?",
    "options": [
      "import static java.lang.Math.*;",
      "static import java.lang.Math.*;",
      "import java.lang.Math.* static;",
      "import java.lang.Math.static.*;"
    ],
    "answer": "import static java.lang.Math.*;",
    "hint": "The `static` keyword comes after `import`.",
    "explanation": "A static import allows you to refer to static members of a class (fields and methods) without specifying the class name. The syntax is `import static <package>.<class>.<member>;` or `import static <package>.<class>.*;`."
  },
  {
    "question": "What will be printed by the following code?",
    "code": "System.out.println(\"Result: \" + 3 + 4);",
    "options": [
      "Result: 7",
      "Result: 34",
      "7",
      "Compilation Error"
    ],
    "answer": "Result: 34",
    "hint": "The `+` operator is evaluated from left to right. What happens when a String is involved?",
    "explanation": "Evaluation proceeds left-to-right. First, \"Result: \" + 3 results in the string \"Result: 3\". Then, \"Result: 3\" + 4 results in the string \"Result: 34\", as the second `+` is also treated as string concatenation."
  },
  {
    "question": "Which of the following regular expressions will match the strings 'color' and 'colour'?",
    "options": [
      "colou?r",
      "colou*r",
      "colou+r",
      "colo(u)r"
    ],
    "answer": "colou?r",
    "hint": "Which quantifier means 'zero or one' of the preceding character?",
    "explanation": "The question mark `?` is a quantifier that means the preceding element (in this case, the letter 'u') can occur zero or one time. This allows it to match both 'color' (zero 'u's) and 'colour' (one 'u')."
  },
  {
    "question": "What is the purpose of the `this` keyword in a constructor like `this.name = name;`?",
    "options": [
      "It refers to the parent class object.",
      "It is a syntax error and will not compile.",
      "It invokes another constructor in the same class.",
      "It distinguishes the instance variable from the local parameter with the same name."
    ],
    "answer": "It distinguishes the instance variable from the local parameter with the same name.",
    "hint": "It resolves ambiguity when names are the same.",
    "explanation": "When a parameter has the same name as an instance variable, `this` is used to explicitly refer to the instance variable. `this.name` refers to the field of the object, while `name` refers to the method parameter."
  },
  {
    "question": "Which of these is the correct way to get the character at the third position of a string `str`?",
    "options": [
      "str[2]",
      "str.get(3)",
      "str.charAt(2)",
      "str.char(3)"
    ],
    "answer": "str.charAt(2)",
    "hint": "String indexing starts at 0, and accessing characters is done through a method.",
    "explanation": "The `charAt()` method returns the character at a specified index. Since indexing is zero-based, the third position is at index 2."
  },
  {
    "question": "In Java, what is the default value for an uninitialized boolean instance variable?",
    "options": [
      "true",
      "false",
      "null",
      "0"
    ],
    "answer": "false",
    "hint": "This is the 'safer' or more conservative default state.",
    "explanation": "If an instance variable of type `boolean` is not explicitly initialized, it is automatically given the default value of `false`."
  },
  {
    "question": "What does the `break` statement do inside a loop?",
    "options": [
      "Skips the current iteration and continues with the next one.",
      "Terminates the program immediately.",
      "Exits the innermost loop or switch statement immediately.",
      "Pauses the execution of the loop for debugging."
    ],
    "answer": "Exits the innermost loop or switch statement immediately.",
    "hint": "It provides a way to stop a loop prematurely.",
    "explanation": "The `break` statement is used to terminate the execution of the nearest enclosing loop (`for`, `while`, `do-while`) or `switch` statement in which it appears."
  },
  {
    "question": "What will be printed by the following code?",
    "code": "System.out.println(3 + 4 + \" :Result\");",
    "options": [
      "34 :Result",
      "7 :Result",
      "12 :Result",
      "Compilation Error"
    ],
    "answer": "7 :Result",
    "hint": "The `+` operator is evaluated from left to right. What happens before a String is involved?",
    "explanation": "Evaluation proceeds left-to-right. First, `3 + 4` is an arithmetic addition, resulting in the integer 7. Then, `7 + \" :Result\"` is a string concatenation, resulting in the string \"7 :Result\"."
  },
  {
    "question": "Which of the following is true about Java's `main` method signature?",
    "options": [
      "It must be declared `private`.",
      "It must be named `Main` with a capital M.",
      "It must accept an array of Strings as an argument.",
      "It must return an `int` status code."
    ],
    "answer": "It must accept an array of Strings as an argument.",
    "hint": "The standard entry point is `public static void main(String[] args)`.",
    "explanation": "The standard signature for the main method, which serves as the entry point for a Java application, requires it to be public, static, have a void return type, and accept a single argument of type `String[]`."
  },
  {
    "question": "What is the output of this code snippet?",
    "code": "int[] numbers = {10, 20, 30};\nSystem.out.println(numbers[3]);",
    "options": [
      "30",
      "0",
      "Compilation Error",
      "ArrayIndexOutOfBoundsException"
    ],
    "answer": "ArrayIndexOutOfBoundsException",
    "hint": "Valid array indices range from 0 to length-1.",
    "explanation": "The array `numbers` has a length of 3, so its valid indices are 0, 1, and 2. Attempting to access the element at index 3 is outside the valid range and will cause an `ArrayIndexOutOfBoundsException` at runtime."
  },
  {
    "question": "Which of these is not a Java keyword?",
    "options": [
      "static",
      "interface",
      "string",
      "class"
    ],
    "answer": "string",
    "hint": "Java keywords are case-sensitive. Think about how you declare a string variable.",
    "explanation": "`String` (with a capital S) is a class name in Java. The lowercase `string` is not a reserved keyword in the language. `static`, `interface`, and `class` are all keywords."
  },
  {
    "question": "What is the 'unboxing' process in Java?",
    "options": [
      "Extracting files from a ZIP archive.",
      "Converting an object of a wrapper type to its corresponding primitive value.",
      "Manually allocating memory for an object.",
      "Removing an object from a Collection."
    ],
    "answer": "Converting an object of a wrapper type to its corresponding primitive value.",
    "hint": "It is the reverse of autoboxing.",
    "explanation": "Unboxing is the automatic conversion that the Java compiler makes to convert a wrapper type object (e.g., `Integer`) to its corresponding primitive type (e.g., `int`) when a primitive is expected."
  },
  {
    "question": "A project developed on one machine is added to the current Eclipse workspace. This action is called...?",
    "options": [
      "Exporting",
      "Importing",
      "Cloning",
      "Syncing"
    ],
    "answer": "Importing",
    "hint": "You are bringing an existing project *into* your workspace.",
    "explanation": "In Eclipse, the 'Import' feature is used to bring an existing project, which might be in an archive file or another directory, into the current workspace so you can work on it."
  },
  {
    "question": "In regular expressions, what does the `$` metacharacter signify?",
    "options": [
      "Matches the beginning of the string.",
      "Matches the end of the string.",
      "Matches a literal dollar sign.",
      "Matches any digit character."
    ],
    "answer": "Matches the end of the string.",
    "hint": "This is the counterpart anchor to `^`.",
    "explanation": "The dollar sign `$` is an anchor that asserts the position at the end of the string. For example, the pattern `end$` would match 'the end' but not 'ending'."
  },
  {
    "question": "What is the value of `result` after execution?",
    "code": "int i = 5;\nboolean result = i instanceof Integer;",
    "options": [
      "true",
      "false",
      "Compilation Error",
      "Runtime Error"
    ],
    "answer": "Compilation Error",
    "hint": "The `instanceof` operator checks if an object is an instance of a specific type.",
    "explanation": "The `instanceof` operator can only be used on reference types (objects), not primitive types like `int`. This code will result in a compilation error because `i` is a primitive."
  },
  {
    "question": "Which method must be implemented by a class that implements the `Runnable` interface?",
    "options": [
      "start()",
      "execute()",
      "run()",
      "main()"
    ],
    "answer": "run()",
    "hint": "This method contains the code that will be executed in a new thread.",
    "explanation": "The `Runnable` interface is a functional interface that declares a single abstract method: `public void run()`. Any class implementing this interface must provide an implementation for the `run` method."
  },
  {
    "question": "Explicit type casting in Java is used to...",
    "options": [
      "Automatically convert a smaller data type to a larger one.",
      "Manually convert a larger data type to a smaller one, with a risk of data loss.",
      "Convert a primitive type to a String.",
      "Convert a String to a primitive type."
    ],
    "answer": "Manually convert a larger data type to a smaller one, with a risk of data loss.",
    "hint": "This is also known as narrowing conversion.",
    "explanation": "Explicit casting (e.g., `int i = (int) myDouble;`) is required when you want to convert a value from a data type with a larger range to one with a smaller range. It tells the compiler you are aware of the potential for losing information."
  },
  {
    "question": "What does the `String.valueOf(123)` method do?",
    "options": [
      "It parses the number 123 from a string.",
      "It returns the character with ASCII value 123.",
      "It converts the integer 123 into its string representation \"123\".",
      "It checks if the number 123 is a valid string."
    ],
    "answer": "It converts the integer 123 into its string representation \"123\".",
    "hint": "This is a common way to get the string representation of various data types.",
    "explanation": "The static `String.valueOf()` method is an overloaded method that provides a string representation for all primitive data types and for objects."
  },
  {
    "question": "What is the output of the following code snippet?",
    "code": "StringBuilder rev = new StringBuilder(\"desserts\");\nrev.reverse();\nSystem.out.println(rev);",
    "options": [
      "desserts",
      "stressed",
      "sstressed",
      "sstr"
    ],
    "answer": "stressed",
    "hint": "The `reverse()` method modifies the StringBuilder in place.",
    "explanation": "The `reverse()` method of the `StringBuilder` class reverses the sequence of characters. Reversing \"desserts\" results in \"stressed\"."
  },
  {
    "question": "Which of the following is the standard Java naming convention for a class that manages user account data?",
    "options": [
      "user_account",
      "userAccount",
      "UserAccount",
      "USER_ACCOUNT"
    ],
    "answer": "UserAccount",
    "hint": "Class names should be nouns and typically start with an uppercase letter.",
    "explanation": "The standard Java naming convention for classes is to use UpperCamelCase (also known as PascalCase), where the first letter of each word in the name is capitalized."
  },
  {
    "question": "A method or variable declared without any access specifier in Java has which level of access?",
    "options": [
      "public",
      "private",
      "protected",
      "default (package-private)"
    ],
    "answer": "default (package-private)",
    "hint": "This is also referred to as package-level access.",
    "explanation": "If no access modifier is specified, the member has default access, meaning it is only visible to other classes within the same package."
  },
  {
    "question": "What is the primary reason for declaring instance variables as `private` and providing public `get` and `set` methods?",
    "options": [
      "To make the code run faster.",
      "To allow for validation and control over how the data is accessed and modified.",
      "It is the only way to access variables from another class.",
      "To save memory."
    ],
    "answer": "To allow for validation and control over how the data is accessed and modified.",
    "hint": "This concept is a cornerstone of encapsulation.",
    "explanation": "Making fields private and using public methods (getters/setters) enforces encapsulation. It allows the class to control its internal state, for example, by adding validation logic in a setter to prevent invalid data like a negative salary."
  },
  {
    "question": "When the statement `Employee emp = new Employee();` is executed, where are the reference variable `emp` and the `Employee` object stored in memory, respectively?",
    "options": [
      "Heap, Stack",
      "Stack, Stack",
      "Heap, Heap",
      "Stack, Heap"
    ],
    "answer": "Stack, Heap",
    "hint": "Reference variables (like pointers) are typically stored in a different memory area than the actual objects they point to.",
    "explanation": "The reference variable `emp` is a local variable to the method and is stored on the Stack. The `new Employee()` part creates the actual object in the Heap, which is the memory area for dynamically allocated objects."
  },
  {
    "question": "What is the output of the following code snippet?",
    "code": "try {\n    int num = Integer.parseInt(\"45a\");\n    System.out.println(num);\n} catch (NumberFormatException e) {\n    System.out.println(\"Invalid number format\");\n}",
    "options": [
      "45",
      "0",
      "Invalid number format",
      "The code does not compile."
    ],
    "answer": "Invalid number format",
    "hint": "The `parseInt` method expects a string containing only digits.",
    "explanation": "The string \"45a\" is not a valid integer representation because of the character 'a'. This causes `Integer.parseInt` to throw a `NumberFormatException`, which is caught by the catch block."
  },
  {
    "question": "Which of the following is the correct command to compile a Java file named `Calculator.java` that belongs to the package `com.math` and place the resulting `.class` file in the correct directory structure within the current folder?",
    "options": [
      "javac Calculator.java",
      "javac -d . Calculator.java",
      "javac com.math.Calculator.java",
      "javac -p . Calculator.java"
    ],
    "answer": "javac -d . Calculator.java",
    "hint": "The `-d` flag tells the compiler where to place the generated class files.",
    "explanation": "The `javac -d <destination>` command compiles the source file. The `-d .` part specifically instructs the compiler to create the package directory structure (e.g., `com/math/`) starting in the current directory (`.`) and place `Calculator.class` inside it."
  },
  {
    "question": "Which code snippet demonstrates unboxing?",
    "code": "Integer myInteger = 100;\nint myPrimitive = myInteger;",
    "options": [
      "Integer myInteger = 100;",
      "int myPrimitive = myInteger;",
      "Both lines",
      "Neither line"
    ],
    "answer": "int myPrimitive = myInteger;",
    "hint": "Unboxing is the conversion from a wrapper object to a primitive type.",
    "explanation": "The line `int myPrimitive = myInteger;` shows unboxing. The Java compiler automatically extracts the `int` value from the `Integer` object `myInteger` and assigns it to the primitive variable `myPrimitive`."
  },
  {
    "question": "What will be the output of this code, which processes command-line arguments?",
    "code": "public class Adder {\n    public static void main(String[] args) {\n        int a = Integer.parseInt(args[0]);\n        int b = Integer.parseInt(args[1]);\n        System.out.println(a + b);\n    }\n}\n\n// Executed with the command: java Adder 5 15",
    "options": [
      "515",
      "20",
      "ArrayIndexOutOfBoundsException",
      "NumberFormatException"
    ],
    "answer": "20",
    "hint": "Command-line arguments are passed as strings and need to be converted to numbers for arithmetic operations.",
    "explanation": "The arguments \"5\" and \"15\" are passed into the `args` array. `Integer.parseInt` converts these strings to integers. The `+` operator then performs arithmetic addition on the integers 5 and 15, printing the result 20."
  },
  {
    "question": "Consider a class `Utility.java` in the package `com.tools`. Which is a valid way to use its `Scanner` object in another class without an `import` statement?",
    "code": "// In another file/package\npublic class Main {\n    public static void main(String[] args) {\n        // How to create a Scanner object?\n    }\n}",
    "options": [
      "Scanner s = new Scanner(System.in);",
      "tools.Scanner s = new tools.Scanner(System.in);",
      "java.util.Scanner s = new java.util.Scanner(System.in);",
      "It is not possible without an import statement."
    ],
    "answer": "java.util.Scanner s = new java.util.Scanner(System.in);",
    "hint": "When not importing, you must provide the full 'address' of the class.",
    "explanation": "If you choose not to use an import statement, you can still use a class from another package by referring to it with its fully qualified name, which includes its complete package path (e.g., `java.util.Scanner`)."
  },
  {
    "question": "What is the result of attempting to parse the string \"31/02/2023\" using a `SimpleDateFormat` object?",
    "code": "try {\n    String dateStr = \"31/02/2023\";\n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Date date = sdf.parse(dateStr);\n    System.out.println(\"Success\");\n} catch (ParseException e) {\n    System.out.println(\"Parse Exception\");\n}",
    "options": [
      "Success",
      "Parse Exception",
      "IllegalArgumentException",
      "The code does not compile."
    ],
    "answer": "Parse Exception",
    "hint": "The `parse` method validates if the date is a real, possible date (e.g., February does not have 31 days).",
    "explanation": "Although the string \"31/02/2023\" matches the `dd/MM/yyyy` pattern syntactically, the date itself is invalid. The `parse` method is strict and will throw a `ParseException` because February 31st does not exist."
  },
  {
    "question": "In a `SimpleDateFormat` pattern string, what is the difference between `yyyy` and `YYYY`?",
    "options": [
      "There is no difference.",
      "`yyyy` is for the standard year, while `YYYY` is for the week-based year.",
      "`yyyy` is for a four-digit year, `YYYY` is for a two-digit year.",
      "`YYYY` is an invalid pattern."
    ],
    "answer": "`yyyy` is for the standard year, while `YYYY` is for the week-based year.",
    "hint": "This is a subtle but important difference, especially around New Year's Eve.",
    "explanation": "`yyyy` represents the calendar year. `YYYY` represents the 'week year', which can sometimes differ from the calendar year at the beginning or end of the year. For most general purposes, `yyyy` is the correct pattern to use."
  },
  {
    "question": "Which of the following lines of code correctly uses static import to call the `sqrt` method?",
    "code": "import static java.lang.Math.sqrt;\n\npublic class Calculator {\n    public static void main(String[] args) {\n        double result = // How to call sqrt on 9.0?\n    }\n}",
    "options": [
      "Math.sqrt(9.0);",
      "sqrt(9.0);",
      "java.lang.Math.sqrt(9.0);",
      "new Math().sqrt(9.0);"
    ],
    "answer": "sqrt(9.0);",
    "hint": "The purpose of a static import is to avoid using the class name.",
    "explanation": "Because `sqrt` was imported statically, it can be called directly without being prefixed by its class name, `Math`. This makes the code more concise."
  },
  {
    "question": "What is the purpose of the CLASSPATH environment variable in Java?",
    "options": [
      "It specifies the version of the Java compiler to use.",
      "It provides a list of directories and JAR files where the JVM should look for user-defined class files.",
      "It sets the maximum amount of memory the JVM can use.",
      "It defines the main class to be executed."
    ],
    "answer": "It provides a list of directories and JAR files where the JVM should look for user-defined class files.",
    "hint": "It tells Java where to find the building blocks (classes) of your application.",
    "explanation": "The CLASSPATH is a path that tells the Java compiler and JVM where to find the `.class` files to compile or run. It's essential for managing dependencies and libraries in larger projects."
  },
  {
    "question": "Class A is in `packageone`. Class B is in `packagetwo`. If a method in Class A is declared as `protected`, can it be accessed by an instance of Class B?",
    "options": [
      "Yes, always.",
      "No, never.",
      "Only if Class B is a subclass of Class A.",
      "Only if Class A and Class B are in the same directory."
    ],
    "answer": "Only if Class B is a subclass of Class A.",
    "hint": "The `protected` modifier's visibility extends to subclasses, even across packages.",
    "explanation": "A `protected` member is accessible within its own package and also to subclasses in different packages. It is not accessible to unrelated classes in different packages."
  },
  {
    "question": "What is the output of the following code snippet using the Calendar class?",
    "code": "Calendar calendar = Calendar.getInstance();\ncalendar.set(2023, Calendar.JANUARY, 30);\ncalendar.add(Calendar.DATE, 5);\nSystem.out.println(calendar.get(Calendar.MONTH) + 1 + \"/\" + calendar.get(Calendar.DATE));",
    "options": [
      "1/35",
      "2/4",
      "2/5",
      "1/30"
    ],
    "answer": "2/4",
    "hint": "The `add` method correctly handles rolling over to the next month. Also, note that months are 0-indexed.",
    "explanation": "The date is set to January 30, 2023. Adding 5 days rolls the date over to the next month. Jan 31 is +1, Feb 1 is +2, Feb 2 is +3, Feb 3 is +4, Feb 4 is +5. The month becomes February (index 1) and the date becomes 4. Since `get(Calendar.MONTH)` returns 0 for January, we add 1 for display, resulting in 2/4."
  },
  {
    "question": "What happens if you try to instantiate a wrapper class with a string that is not in the correct format?",
    "code": "Double d = new Double(\"3.14x\");",
    "options": [
      "It will be instantiated with a value of 0.0.",
      "It will be instantiated with a value of 3.14.",
      "It will throw a NumberFormatException.",
      "It will cause a compile-time error."
    ],
    "answer": "It will throw a NumberFormatException.",
    "hint": "The string must be parsable into the corresponding numeric type.",
    "explanation": "The string passed to a wrapper class constructor (or `parseXXX` method) must be a valid representation of that number type. Since \"3.14x\" contains a non-numeric character 'x', a `NumberFormatException` is thrown at runtime."
  },
  {
    "question": "Which of these statements about the `java.lang` package is true?",
    "options": [
      "It must be explicitly imported in every Java file.",
      "It contains fundamental classes like `Object`, `String`, and wrapper classes.",
      "It is primarily used for graphical user interface (GUI) development.",
      "It contains classes for database connectivity."
    ],
    "answer": "It contains fundamental classes like `Object`, `String`, and wrapper classes.",
    "hint": "This package is so essential that you never have to import it yourself.",
    "explanation": "The `java.lang` package contains classes that are fundamental to the design of the Java language. It is automatically imported into every Java program, which is why you can use classes like `String` and `System` without an explicit import statement."
  },
  {
    "question": "Which method is used to convert a wrapper object to its primitive `int` value?",
    "code": "Integer iObject = new Integer(42);",
    "options": [
      "iObject.getInt()",
      "iObject.toInt()",
      "iObject.intValue()",
      "iObject.getValue()"
    ],
    "answer": "iObject.intValue()",
    "hint": "The method name follows a pattern of `xxxValue()` where xxx is the primitive type.",
    "explanation": "All numeric wrapper classes provide a set of `xxxValue()` methods to retrieve the value as a specific primitive type. For an `Integer` object, `intValue()` returns the value as an `int`."
  },
  {
    "question": "What is the purpose of the `*` (asterisk) in an import statement like `import java.util.*;`?",
    "options": [
      "It imports all classes and all sub-packages of `java.util`.",
      "It is a syntax error.",
      "It imports all the classes in the `java.util` package, but not its sub-packages.",
      "It improves the runtime performance of the program."
    ],
    "answer": "It imports all the classes in the `java.util` package, but not its sub-packages.",
    "hint": "The wildcard `*` only applies to classes at the current package level.",
    "explanation": "The wildcard `*` makes all public classes and interfaces within a specific package available to the current file without needing to be fully qualified. It does not recursively import from sub-packages."
  },
  {
    "question": "Which of the following is an example of an 'intangible object' as described in object-oriented principles?",
    "options": [
      "A car",
      "A user's bank transaction",
      "A laptop",
      "A chair"
    ],
    "answer": "A user's bank transaction",
    "hint": "An intangible object is a logical concept rather than a physical item.",
    "explanation": "While a car, laptop, and chair are all tangible, physical objects, a bank transaction is a conceptual or logical entity. It has properties (amount, date, type) and behaviors, but it does not physically exist."
  },
  {
    "question": "Which statement correctly describes the relationship between a class and an object?",
    "options": [
      "A class is an instance of an object.",
      "An object is a blueprint for a class.",
      "A class is a blueprint for creating objects.",
      "A class and an object are the same thing."
    ],
    "answer": "A class is a blueprint for creating objects.",
    "hint": "The class defines the template; the object is the real thing created from that template.",
    "explanation": "A class is a template or prototype that defines the attributes (state) and methods (behavior) common to all objects of a certain kind. An object is a concrete instance of that class."
  },
  {
    "question": "Which method of the `Date` class is NOT deprecated and is commonly used to compare two dates?",
    "options": [
      "getYear()",
      "getMonth()",
      "compareTo()",
      "getDate()"
    ],
    "answer": "compareTo()",
    "hint": "Many of the old getter methods are deprecated in favor of using the Calendar API.",
    "explanation": "The `compareTo()` method is used to compare two dates. It returns a value less than 0 if the date is before the argument date, 0 if they are equal, and a value greater than 0 if it's after. Methods like `getYear` and `getMonth` are deprecated."
  },
  {
    "question": "What will the following code print?",
    "code": "String str = \"Hello World\";\nchar c = str.charAt(str.length());",
    "options": [
      "d",
      "An empty character",
      "StringIndexOutOfBoundsException",
      "Compilation Error"
    ],
    "answer": "StringIndexOutOfBoundsException",
    "hint": "The valid indices for a string are from 0 to length-1.",
    "explanation": "The length of \"Hello World\" is 11. The valid indices are 0 through 10. The code attempts to access the character at index 11, which is out of bounds, resulting in a `StringIndexOutOfBoundsException`."
  },
  {
    "question": "A Java source file can contain multiple classes, but at most, how many can be declared `public`?",
    "options": [
      "Zero",
      "One",
      "Two",
      "As many as needed"
    ],
    "answer": "One",
    "hint": "The public class name must match the filename.",
    "explanation": "A single `.java` source file can only have one `public` class. The name of that public class must be the same as the name of the source file (e.g., `MyClass.java` must contain `public class MyClass`)."
  },
  {
    "question": "What is the return type of a setter method, according to Java naming conventions?",
    "options": [
      "The type of the variable being set",
      "boolean",
      "void",
      "Object"
    ],
    "answer": "void",
    "hint": "A setter's job is to modify state, not to return a value.",
    "explanation": "By convention, a setter method (e.g., `setSalary(double newSalary)`) takes a parameter to update an instance variable and has a `void` return type, as its primary purpose is to cause a side effect (changing the object's state)."
  },
  {
    "question": "Which of these is NOT a valid way to create an `Integer` object with the value 50?",
    "options": [
      "Integer i1 = new Integer(50);",
      "Integer i2 = 50;",
      "Integer i3 = Integer.valueOf(50);",
      "Integer i4 = (Integer)50;"
    ],
    "answer": "Integer i4 = (Integer)50;",
    "hint": "Casting is used to convert between compatible types, not to create an object from a primitive.",
    "explanation": "Casting a primitive `int` to an `Integer` using `(Integer)` is not valid syntax. The other three options are valid: using the constructor (now deprecated), using autoboxing, and using the static factory method `valueOf`."
  },
  {
    "question": "What would be the output if the following program is run without any command-line arguments?",
    "code": "public class TestArgs {\n    public static void main(String[] args) {\n        System.out.println(args[0]);\n    }\n}",
    "options": [
      "null",
      "An empty string",
      "Compilation Error",
      "ArrayIndexOutOfBoundsException"
    ],
    "answer": "ArrayIndexOutOfBoundsException",
    "hint": "If no arguments are provided, what is the length of the `args` array?",
    "explanation": "When the program is run without arguments, the `args` array is created but it is empty (its length is 0). The code then tries to access the element at index 0, which does not exist, leading to an `ArrayIndexOutOfBoundsException`."
  },
  {
    "question": "What is the best class to use when you need to perform calculations on a date, such as adding 3 months or subtracting 10 days?",
    "options": [
      "Date",
      "SimpleDateFormat",
      "Calendar",
      "String"
    ],
    "answer": "Calendar",
    "hint": "This class was specifically designed for date and time arithmetic.",
    "explanation": "While the `Date` class represents a specific instant in time, the `Calendar` class provides methods for converting between a specific instant in time and a set of calendar fields (like YEAR, MONTH, DAY), and for manipulating these fields."
  },
  {
    "question": "In the context of object properties, which of the following represents the 'state' of a `Car` object?",
    "options": [
      "The car's unique Vehicle Identification Number (VIN).",
      "The methods `startEngine()` and `accelerate()`.",
      "The current values of its color ('Red'), speed (60 mph), and fuel level (50%).",
      "The `Car` class definition itself."
    ],
    "answer": "The current values of its color ('Red'), speed (60 mph), and fuel level (50%).",
    "hint": "State refers to the current data or attributes of an object.",
    "explanation": "An object's state is defined by the values of its instance variables at any given moment. Behavior is what the object can do (methods), and identity is what makes it unique (like its memory address or a unique ID)."
  },
  {
    "question": "If you create a `Date` object using `new Date()`, what time does it represent?",
    "options": [
      "January 1st, 1970 (the Unix epoch).",
      "The current date and time at which the object is created.",
      "The date the Java program was compiled.",
      "A null or empty date."
    ],
    "answer": "The current date and time at which the object is created.",
    "hint": "The no-argument constructor captures the 'now'.",
    "explanation": "The `new Date()` constructor allocates a `Date` object and initializes it to represent the time at which it was allocated, measured to the nearest millisecond."
  },
  {
    "question": "Which of the following will result in a compile-time error?",
    "options": [
      "package com.example; class A {}",
      "import java.util.*; package com.example; class A {}",
      "package com.example; import java.util.*; class A {}",
      "class A {}"
    ],
    "answer": "import java.util.*; package com.example; class A {}",
    "hint": "There is a strict order for `package` and `import` statements in a Java file.",
    "explanation": "In a Java source file, the `package` declaration, if present, must be the very first line of code (excluding comments). Placing an `import` statement before the `package` statement is a syntax error and will cause compilation to fail."
  },
  {
    "question": "Which wrapper class corresponds to the primitive data type `char`?",
    "options": [
      "Char",
      "String",
      "Character",
      "C"
    ],
    "answer": "Character",
    "hint": "Most wrapper class names are the capitalized version of the primitive, but this one is the full word.",
    "explanation": "The wrapper class for the primitive `char` is `java.lang.Character`."
  },
  {
    "question": "What does the `get-date instance()` method from the `DateFormat` class return?",
    "options": [
      "A `Date` object for the current day.",
      "A `String` containing the formatted current date.",
      "An instance of `DateFormat` configured with a default style and locale.",
      "The number of milliseconds since the epoch."
    ],
    "answer": "An instance of `DateFormat` configured with a default style and locale.",
    "hint": "This is a factory method that gives you a formatter object, not the formatted date itself.",
    "explanation": "`DateFormat.getDateInstance()` is a static factory method that creates and returns a `DateFormat` object. This object can then be used to format `Date` objects into strings using its `format()` method."
  },
  {
    "question": "Which of the following correctly describes the behavior of a method in Java?",
    "options": [
      "It represents the data or attributes of an object.",
      "It is a template from which objects are created.",
      "It defines a unique identifier for an object.",
      "It represents the responsibility of an object and can lead to a change in the object's state."
    ],
    "answer": "It represents the responsibility of an object and can lead to a change in the object's state.",
    "hint": "Behavior is about what an object can *do*.",
    "explanation": "Methods define the behavior of an object. Executing a method often performs an action that modifies the object's instance variables (its state), such as a `deposit()` method changing the `balance` of a `BankAccount` object."
  },
  {
    "question": "To convert a string to a `double` primitive, which method would you use?",
    "options": [
      "new Double(\"123.45\")",
      "Double.parseDouble(\"123.45\")",
      "Double.getDouble(\"123.45\")",
      "Integer.parseInt(\"123.45\")"
    ],
    "answer": "Double.parseDouble(\"123.45\")",
    "hint": "Each numeric wrapper class has a static `parseXXX` method for this purpose.",
    "explanation": "The static method `Double.parseDouble(String s)` is the standard way to parse a string and get its corresponding `double` primitive value."
  },
  {
    "question": "What is the output of this code?",
    "code": "int x = 1;\nif (x = 2) > 1 {\n    System.out.println(\"Hello\");\n} else {\n    System.out.println(\"World\");\n}",
    "options": [
      "Hello",
      "World",
      "Compilation Error",
      "Runtime Error"
    ],
    "answer": "Compilation Error",
    "hint": "The assignment operator `=` returns the assigned value, but the `if` keyword requires a boolean expression.",
    "explanation": "The expression `x = 2` is an assignment, not a comparison. While it evaluates to the integer 2, the `if` statement in Java requires a `boolean` condition. `if (2 > 1)` would be valid, but `if (x = 2)` is not, because `x=2` is not a boolean. This results in a compile-time error."
  },
  {
    "question": "In the `Calendar` class, why is it necessary to add 1 to the value returned by `get(Calendar.MONTH)` to display the correct month number?",
    "options": [
      "It is a bug in the `Calendar` class.",
      "The months are indexed from 1 to 12.",
      "The months are indexed from 0 (January) to 11 (December).",
      "The method returns the previous month by default."
    ],
    "answer": "The months are indexed from 0 (January) to 11 (December).",
    "hint": "This is a common source of bugs for new Java programmers.",
    "explanation": "For historical reasons, the `Calendar` API represents months with 0-based indexing. January is 0, February is 1, and so on, up to December being 11. Therefore, you must add 1 to the result to get the conventional month number for display."
  },
  {
    "question": "What is the primary advantage of using autoboxing in Java?",
    "options": [
      "It makes the program run significantly faster.",
      "It improves code readability by reducing the boilerplate code needed to convert between primitives and wrappers.",
      "It allows primitives to have methods.",
      "It reduces the memory usage of the program."
    ],
    "answer": "It improves code readability by reducing the boilerplate code needed to convert between primitives and wrappers.",
    "hint": "Compare `list.add(new Integer(5));` with `list.add(5);`.",
    "explanation": "Autoboxing and unboxing simplify the code by making the conversion between primitive types and their corresponding wrapper classes automatic. This removes the need for manual wrapping and unwrapping, making the code cleaner and less error-prone."
  },
  {
    "question": "Which of these is NOT a wrapper class in Java?",
    "options": [
      "Integer",
      "Boolean",
      "Float",
      "String"
    ],
    "answer": "String",
    "hint": "Wrapper classes correspond directly to the eight primitive types.",
    "explanation": "`Integer`, `Boolean`, and `Float` are wrapper classes for `int`, `boolean`, and `float` respectively. `String` is a class for representing character sequences, but it does not wrap a specific primitive type."
  },
  {
    "question": "When executing a Java class from the command line that is inside a package, what name do you provide to the `java` command?",
    "code": "// File structure: ./com/example/Main.class\npackage com.example;\npublic class Main { ... }",
    "options": [
      "Main",
      "Main.class",
      "com.example.Main",
      "com/example/Main"
    ],
    "answer": "com.example.Main",
    "hint": "You must use the name that the JVM can use to locate the class.",
    "explanation": "To execute a class that is part of a package, you must provide its fully qualified class name to the `java` command. The JVM uses this name, along with the classpath, to locate and load the correct `.class` file."
  },
  {
    "question": "What is the output of the following date formatting?",
    "code": "Date date = new Date(); // Assume this runs on Oct 31, 2023\nSimpleDateFormat sdf = new SimpleDateFormat(\"E, MMM dd, yyyy\");\nSystem.out.println(sdf.format(date));",
    "options": [
      "Tuesday, October 31, 2023",
      "Tue, Oct 31, 2023",
      "T, 10 31, 23",
      "An exception is thrown."
    ],
    "answer": "Tue, Oct 31, 2023",
    "hint": "Refer to the standard patterns: `E` for short day name, `MMM` for short month name.",
    "explanation": "The pattern specifies the format: `E` for the abbreviated day of the week (Tue), `MMM` for the abbreviated month (Oct), `dd` for the two-digit day of the month (31), and `yyyy` for the four-digit year (2023)."
  },
  {
    "question": "If a class `Product` has a private `String name` field, what is the conventional name for its getter method?",
    "options": [
      "name()",
      "readName()",
      "productName()",
      "getName()"
    ],
    "answer": "getName()",
    "hint": "Getters are typically prefixed with 'get' followed by the capitalized field name.",
    "explanation": "The standard Java convention for an accessor (getter) method for a field named `name` is `getName()`. For a boolean field like `isActive`, the convention is often `isActive()`."
  },
  {
    "question": "What is the purpose of the `final` keyword when applied to a class?",
    "options": [
      "It ensures that the class can only have static methods.",
      "It prevents the class from being instantiated.",
      "It prevents the class from being extended (inherited from).",
      "It marks the class for garbage collection."
    ],
    "answer": "It prevents the class from being extended (inherited from).",
    "hint": "Classes like `String` are final for security and immutability reasons.",
    "explanation": "When a class is declared as `final`, it cannot be subclassed. This is used to create immutable classes or to prevent unintended behavior from subclasses."
  },
  {
    "question": "You need to create a `Date` object for January 1st, 1970. How can you do this?",
    "options": [
      "new Date(0L)",
      "new Date(1970, 1, 1)",
      "new Date(\"1970-01-01\")",
      "new Date()"
    ],
    "answer": "new Date(0L)",
    "hint": "The `Date` object's time is measured in milliseconds from a specific starting point.",
    "explanation": "The Java `Date` is internally stored as the number of milliseconds since the Unix epoch, which is January 1st, 1970, 00:00:00 GMT. Therefore, creating a `Date` with 0 milliseconds (`0L`) gives you exactly that date."
  },
  {
    "question": "Which of these comparisons will return `true`?",
    "code": "String s1 = \"Test\";\nString s2 = \"Test\";\nString s3 = new String(\"Test\");",
    "options": [
      "s1 == s3",
      "s1.equals(s3)",
      "s1 == new String(\"Test\")",
      "s2 == s3"
    ],
    "answer": "s1.equals(s3)",
    "hint": "Use `.equals()` for content comparison and be aware of the string constant pool for `==`.",
    "explanation": "`s1` and `s2` point to the same object in the string constant pool. `s3` is a new object on the heap. `==` compares references, so `s1 == s3` is false. `.equals()` compares the actual character sequence, so `s1.equals(s3)` is true."
  },
  {
    "question": "Which of these is NOT a valid Java identifier (variable name)?",
    "options": [
      "_myVariable",
      "$amount",
      "user-name",
      "userName1"
    ],
    "answer": "user-name",
    "hint": "Identifiers can contain letters, digits, underscores, and dollar signs, but they have rules about where these can be used.",
    "explanation": "Java identifiers cannot contain hyphens (-). They must start with a letter, dollar sign ($), or underscore (_), and subsequent characters can also be digits."
  },
  {
    "question": "In the `Calendar` class, what does `Calendar.getInstance()` do?",
    "options": [
      "Creates a calendar for January 1st of the current year.",
      "Returns a new `Calendar` object using the default time zone and locale.",
      "Returns a singleton instance of the `Calendar` class.",
      "It is a syntax error; `Calendar` must be instantiated with `new`."
    ],
    "answer": "Returns a new `Calendar` object using the default time zone and locale.",
    "hint": "This is a factory method used to get a concrete implementation of the abstract Calendar class.",
    "explanation": "`Calendar` is an abstract class. The static factory method `getInstance()` returns an object of a concrete subclass (like `GregorianCalendar`) that is initialized with the current date and time in the default locale and time zone."
  },
  {
    "question": "An 'attribute' of a class is also commonly known as what?",
    "options": [
      "A method",
      "A constructor",
      "An instance variable or field",
      "A package"
    ],
    "answer": "An instance variable or field",
    "hint": "Attributes define the properties or data that an object holds.",
    "explanation": "The terms attribute, field, and instance variable are often used interchangeably to refer to the variables declared within a class that define the state of its objects."
  },
  {
    "question": "In regular expressions, what is the purpose of character classes?",
    "options": [
      "To specify the number of occurrences of a character.",
      "To define what characters the pattern should look for.",
      "To specify the order of characters in the string.",
      "To create a new class for pattern matching."
    ],
    "answer": "To define what characters the pattern should look for.",
    "hint": "Character classes are used to match a *set* of characters.",
    "explanation": "Character classes allow you to match any single character from a defined set. For example, `[aeiou]` will match any vowel."
  },
  {
    "question": "Given the regular expression `\\d{3}-\\d{2}-\\d{4}`, what format is this likely intended to match?",
    "options": [
      "A time in the format HH-MM-SS",
      "A date in the format YYYY-MM-DD",
      "A product ID",
      "A U.S. Social Security number (SSN)"
    ],
    "answer": "A U.S. Social Security number (SSN)",
    "hint": "Pay attention to the quantities of digits specified.",
    "explanation": "The pattern `\\d{3}-\\d{2}-\\d{4}` matches three digits, a hyphen, two digits, a hyphen, and four digits, which is the standard format for a United States Social Security Number (SSN)."
  },
  {
    "question": "What's the key difference between `java.util.regex.Pattern` and `java.util.regex.Matcher`?",
    "options": [
      "Pattern represents the regular expression; Matcher is used to execute the regex against an input string.",
      "Matcher represents the regular expression; Pattern is used to execute the regex against an input string.",
      "Pattern is used for simple regex; Matcher is used for complex regex.",
      "Pattern is immutable; Matcher is mutable."
    ],
    "answer": "Pattern represents the regular expression; Matcher is used to execute the regex against an input string.",
    "hint": "One is the definition of the pattern; the other is the engine that uses it.",
    "explanation": "A `Pattern` object is the *compiled representation* of a regular expression. A `Matcher` object is created from a `Pattern` and is then used to perform matching operations against a specific input sequence."
  },
  {
    "question": "Which of the following regular expressions would successfully validate a name that MUST start with an uppercase letter, followed by one or more lowercase letters?",
    "options": [
      "[A-Z][a-z]*",
      "^[A-Z][a-z]+",
      "[A-Z][a-z]?",
      "^[a-z][A-Z]+"
    ],
    "answer": "^[A-Z][a-z]+",
    "hint": "Remember anchors and quantifiers.",
    "explanation": "`^[A-Z][a-z]+` matches: `^` the beginning of the string, `[A-Z]` a single uppercase letter, `[a-z]+` one or more lowercase letters. This ensures the entire name follows the specified format."
  },
  {
    "question": "Given the code `String input = \"Hello123World\";`, what will be the output of `System.out.println(input.matches(\"\\\\w+\"));`?",
    "options": [
      "true",
      "false",
      "Compilation Error",
      "Runtime Error"
    ],
    "answer": "true",
    "hint": "\\w represents a word character.",
    "explanation": "`\\w` matches any word character (letter, number, or underscore). `+` means 'one or more occurrences'. The string \"Hello123World\" consists entirely of word characters, so `matches` returns `true`."
  },
  {
    "question": "What does the following regular expression match?",
    "code": "String regex = \".*@example\\\\.com\";",
    "options": [
      "Any string ending with @example.com",
      "Any string containing @example.com anywhere",
      "Only the exact string \"@example.com\"",
      "A string starting with @example.com"
    ],
    "answer": "Any string ending with @example.com",
    "hint": "The `.` (dot) and `*` have special meanings inside a regular expression.",
    "explanation": "In this regex, `.*` matches zero or more of any character. Then `@example\\.com` matches the literal string \"@example.com\". This combination matches any string ending with  \"@example.com\"."
  },
  {
    "question": "With respect to String objects, which is true?",
    "options": [
      "They can be changed once they're created, as with StringBuilder and StringBuffer",
      "They are mutable",
      "They are immutable, making them inherently thread-safe",
      "Strings are allocated to both the heap and stack"
    ],
    "answer": "They are immutable, making them inherently thread-safe",
    "hint": "Think about what thread-safe means. Then remember if a string can be changed or not.",
    "explanation": "Immutability means the contents of a `String` object cannot be changed after it is created. This inherent immutability makes `String` objects thread-safe, as there's no risk of concurrent modification problems."
  },
  {
    "question": "Which line will cause an error?",
    "code": "String str1 = \"Hello\";\nString str2 = str1.toUpperCase();\nstr1.replace('H', 'J');\nSystem.out.println(str1);",
    "options": [
      "String str1 = \"Hello\";",
      "String str2 = str1.toUpperCase();",
      "str1.replace('H', 'J');",
      "System.out.println(str1);"
    ],
    "answer": "str1.replace('H', 'J');",
    "hint": "This method is perfectly fine, but does it change the original?",
    "explanation": "The `replace()` method creates a *new* String. It's a common misunderstanding in the heat of the moment that method needs to be assigned to a String. But the line itself is fine and won't cause an error, `str1` will simply remain untouched. If you wish to change the value you need `str1=str1.replace('H', 'J');`."
  },
  {
    "question": "With reference to the `String` class, what are the arguments to the `substring` method used for?",
    "options": [
      "Starting character and count.",
      "Ending character and count.",
      "Starting index and ending index.",
      "Ending index and starting index."
    ],
    "answer": "Starting index and ending index.",
    "hint": "The parameters specify the limits of a part of the original `String` to create the substring.",
    "explanation": "The `substring` method takes two arguments: a `beginIndex` (inclusive) and an `endIndex` (exclusive). That is, the substring will start at the `beginIndex` and extend up to, *but not including*, the character at `endIndex`."
  },
  {
    "question": "What methods can check whether a string 'contains' another given string?",
    "options": [
      "`startsWith` and `endsWith`.",
      "`substring` and `indexOf`.",
      "`concat` and `equals`.",
      "`matches` and `replaceAll`."
    ],
    "answer": "`substring` and `indexOf`.",
    "hint": "Think about functions that return sub-sections of a string and return if its found or not.",
    "explanation": "Although not directly containing the function name `contains`, these two methods do achieve the task when combined. Where `substring` creates a smaller string for checking, `indexOf` returns the position if found and `-1` otherwise."
  },
  {
    "question": "What must you do to compare Strings for equality?",
    "options": [
      "Double equals.",
      "Use the `compareTo` function.",
      "Use the `equals` or `equalsIgnoreCase` functions",
      "Using `equals` or `equalsIgnoreCase` is unneccessary."
    ],
    "answer": "Use the `equals` or `equalsIgnoreCase` functions",
    "hint": "Double equals compares *references*. You need a method to check *content*.",
    "explanation": "For any content comparison, you must compare `equals` or `equalsIgnoreCase`. These check for the same contents inside the strings, rather than compare that the same object is being pointed to (the reference)."
  },
  {
    "question": "Which method returns the number of characters in a string?",
    "options": [
      "`numberOfCharacters`",
      "`size`",
      "`getCharacters`",
      "`length`"
    ],
    "answer": "`length`",
    "hint": "Keep in mind what the function deals with.",
    "explanation": "The Java `String` API provides `.length` which counts the number of characters found."
  },
  {
    "question": "How do you get the character at index 4 in Java?",
    "options": [
      "`getChar`",
      "`char`",
      "`charAt`",
      "`character`"
    ],
    "answer": "`charAt`",
    "hint": "The function name sounds like 'character at'.",
    "explanation": "In the Java `String` API, it is `.charAt`. `charAt` returns the character at the specified position."
  },
  {
    "question": "Which of the following is true?",
    "options": [
      "String pool stores string objects and string literals",
      "String pool doesn't have duplicate values",
      "To use the String pool, call the `new String` constructor",
      "String pool is on the stack"
    ],
    "answer": "String pool doesn't have duplicate values",
    "hint": "String pool is about memory use.",
    "explanation": "Java checks if a String literal exists in the string pool before assigning or creating new objects. If there's a duplicate, it simply assigns, rather than duplicating."
  },
    {
      "question": "Which of these string methods is used to compare two strings ignoring case?",
      "options": [
          "equals",
          "equalsCase",
          "equalsIgnoreCase",
          "compareToIgnoreCase"
      ],
      "answer": "equalsIgnoreCase",
      "hint": "You want to equate strings, so what can we take from that hint.",
      "explanation": "The equalsIgnoreCase compares if the sequence of characters are similar, while not considering the case (capital/non-capital) of each letter in the string."
  },
  {
      "question": "The expression a+=b for strings results in a string concatenation but has what?",
      "options": [
          "Requires creating new Strings",
          "Doesn't require creating new Strings",
          "Can append values but not strings",
          "Only works for numbers"
      ],
      "answer": "Requires creating new Strings",
      "hint": "Strings are immutable.",
      "explanation": "Since strings cannot be changed (immutable), any alterations result in having to create a new string with a different value. There are no such alterations done in-place."
  },
  {
      "question": "Which of these would extract the front part of a string?",
      "options": [
          "rearString",
          "mainString",
          "lastString",
          "substring"
      ],
      "answer": "substring",
      "hint": "Sub implies you want a part of the string.",
      "explanation": "Sub implies it's a smaller part of the original. Then with string implies its of the string."
  },
  {
      "question": "If you want to check a string but require use of a 'search pattern', which of these would you use?",
      "options": [
          "`find`",
          "Regular Expressions",
          "If",
          "Try statements"
      ],
      "answer": "Regular Expressions",
      "hint": "Patterns are at the heart of this.",
      "explanation": "Regular expressions allow for string matching by making patterns. You could look for numbers, sequences, or letters. Its very versatile, but can be a bit complex."
  },
  {
      "question": "Which of these has to do with Strings?",
      "options": [
          "Quantifiers",
          "Letters",
          "Digits",
          "Symbols"
      ],
      "answer": "Quantifiers",
      "hint": "How much of something.",
      "explanation": "In relation to Strings, they deal with how much of certain characters there are. Like two of this or three of that. In relation to strings, quantifiers deal with quantity of the characters."
  },
  {
        "question": "When should a loop use curly braces, if at all?",
        "options": [
            "They are necessary for the if statement",
            "Only when the statements can only contain 2 lines.",
            "If there is more than one action or statement to be repeated",
            "Only one if there's nothing inside"
        ],
        "answer": "If there is more than one action or statement to be repeated",
        "hint": "When is something needed?",
        "explanation": "The main situation in which curly braces are needed is when there's more than one action to be done in the function. If there's only one, than it does not need braces."
    },
    {
        "question": "In Java, what does the expression i++ do? Also what is it?",
        "options": [
            "It's known as a preincrement, where the value is added by one before execution of the code.",
            "It's known as a preincrement, where the value is added by one after execution of the code.",
            "It's known as a postincrement, where the value is added by one after execution of the code",
            "It's known as a postincrement, where the value is added by one before execution of the code"
        ],
        "answer": "It's known as a postincrement, where the value is added by one after execution of the code",
        "hint": "What is post and pre?",
        "explanation": "In 'post', the value is added after use, while in pre the value is incremented first then used. For instance x=i++ would make x equal 1, while i would equal 2. int x=++i would make both x and i 2."
    },
    {
        "question": "What must all code have inside a function?",
        "options": [
            "Curly Braces",
            "Comments",
            "Parenthesis",
            "Statements"
        ],
        "answer": "Statements",
        "hint": "Code requires instructions.",
        "explanation": "Code uses statements to perform. Curly braces show code block, parenthesis is only for input and output to functions (or more), comments are optional."
    },
    {
      "question": "What does the following code produce?",
      "code": "int[] numbers = {1, 2, 3, 4, 5};\nint sum = 0;\nfor (int number : numbers) {\n    sum += number;\n}\nSystem.out.println(sum);",
      "options": [
        "5",
        "10",
        "15",
        "Compilation error"
      ],
      "answer": "15",
      "hint": "The `for` loop being used is called the 'enhanced for' or 'for-each' loop.",
      "explanation": "The enhanced for loop iterates through each element in the `numbers` array. The `sum` variable starts at 0. Each `number` from the array is added to `sum`, resulting in 1 + 2 + 3 + 4 + 5 = 15."
    },
    {
      "question": "Which statement declares a 2D array (matrix) capable of storing 3 rows and 4 columns of integer values?",
      "options": [
        "int matrix = new int[3][4];",
        "int matrix = new int[4][3];",
        "int[3][4] matrix = new int[][];",
        "int matrix = new int[][3,4];"
      ],
      "answer": "int matrix = new int[3][4];",
      "hint": "The dimensions are defined inside square brackets after the `new` keyword.",
      "explanation": "The correct syntax to declare a 2D array is `int matrix = new int[rows][columns];`. `int matrix = new int[3][4];` creates an integer matrix with 3 rows and 4 columns."
    },
    {
      "question": "In Java, what is the purpose of the `varargs` feature (variable arguments)?",
      "options": [
        "It allows you to declare a variable with a type that can change during runtime.",
        "It allows a method to accept a variable number of arguments of the same type.",
        "It is a way to create local variables with scope limited to a single line of code.",
        "It enables passing primitive types as reference types."
      ],
      "answer": "It allows a method to accept a variable number of arguments of the same type.",
      "hint": "The syntax uses three dots (...) after the data type.",
      "explanation": "Varargs provide a convenient way to create methods that can take a varying number of arguments of the same type. This is done using the ellipsis (...) syntax. For example, `public void printNames(String... names)` can accept zero or more `String` arguments."
    },
    {
      "question": "What does this code do?",
      "code": "public void display(String... names) {\n    for (String name : names) {\n        System.out.println(name);\n    }\n}",
      "options": [
        "It throws an exception if `names` is null.",
        "It prints each name in the `names` parameter.",
        "It only prints the first name.",
        "It creates a new `String` object for each name."
      ],
      "answer": "It prints each name in the `names` parameter.",
      "hint": "The for-each loop provides a concise way to iterate through the elements of an array (or collection).",
      "explanation": "The code uses an enhanced for loop to iterate over the `names` array (which is implicitly created from the varargs). For each `String name` in the array, it prints the name to the console, thus printing each element that was passed as an argument to the method."
    },
    {
       "question": "If an array is only declared, what value is assigned to it? For instance `int[] scores` what is scores?",
       "options": [
           "Assigned a range of 0 to 1",
           "An empty array is assigned",
           "The array is assigned to null",
           "A default value for ints is assigned at every position"
       ],
       "answer": "The array is assigned to null",
       "hint": "Arrays are reference data types.",
       "explanation": "Since arrays are reference types, declaring without assigning the value is null. If not for that, there would be a default integer in the array and there would be no need for the new keyword or assignment."
   },
   {
      "question": "What is the purpose of sort in a Java program?",
      "options": [
          "It is used to find a specific element",
          "It is used to delete elements",
          "It makes everything more efficient",
          "It reorders the data values in a particular order"
      ],
      "answer": "It reorders the data values in a particular order",
      "hint": "What makes something like an array 'organized'?",
      "explanation": "Arrays are simply a block of numbers. Sort algorithms make sure to perform that task or organizing it from greatest to smallest, or something similar."
   },
   {
       "question": "In java.util.Arrays, which of these arguments does it take?",
       "options": [
           "A reference to an object array",
           "The first and last index for sorting",
           "A specific sort method for the compiler",
           "Just the array to sort, automatically"
       ],
       "answer": "Just the array to sort, automatically",
       "hint": "Remember to import from the correct package, otherwise you won't find the easy function.",
       "explanation": "Simply provide the array that needs to be sorted and the API does the work. Sorts happen in-place, so there is no need for a variable call or setting to anything."
   },
   {
       "question": "What are valid access specifiers?",
       "options": [
           "Final, Static, Abstract, Volatile",
           "Public, Private, Protected, Default",
           "Internal, External, Subclass, Implemented",
           "Constant, Variable, Method, Class"
       ],
       "answer": "Public, Private, Protected, Default",
       "hint": "What are things you specify before creating variables or methods?",
       "explanation": "Each of them all relate to access. Where public is the highest accessibility and private is the lowest. Default means only code in the same package can see it. protected allows it to be used in sub classes."
   },
   {
       "question": "What function helps make the following an object rather than have to print individually?",
        "code": "int[] myNumbers = {1, 2, 3, 4, 5};",
        "options": [
            "toString()",
            "reverse",
            "getValues",
            "There is no easy or single way."
        ],
        "answer": "toString()",
        "hint": "It does not need to reverse or get a value from the list.",
        "explanation": "Object is what you assign anything in the array to be, if the toString method isn't available, than you cannot treat everything inside the array to a single object. There will be no need to reverse or get the value."
   },
   {
    "question": "What is one of the design guidelines when creating a package?",
    "options": [
        "Classes within that class have to be named starting with the package name",
        "The code has to have a main function that is blank",
        "Package names should have camel case",
        "Only related classes should be kept in the package"
    ],
    "answer": "Only related classes should be kept in the same package",
    "hint": "What is package all about?",
    "explanation": "As mentioned, related classes are kept in the same package. A few reasons are readability and reducing dependency issues."
    },
    {
    "question": "With packages, which of these is true?",
    "options": [
        "Can only be created if there are 10 or more classes to group",
        "Can be declared using the package keyword, after the class declaration",
        "Package names should use reverse internet domain name of a company",
        "Cannot contain Classes"
    ],
    "answer": "Package names should use reverse internet domain name of a company",
    "hint": "Read the description again carefully to ensure it is a package and not something else",
    "explanation": "Packages can contain interfaces and sub packages. Since code packages may be on different levels, the convention is that to avoid naming conflicts, you use the reverse domain name."
    }
]