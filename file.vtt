WEBVTT

1
00:00:00.000 --> 00:00:03.640
Welcome to the learning session on Software Configuration Management.

2
00:00:04.830 --> 00:00:06.380
After completing this module,

3
00:00:06.520 --> 00:00:11.140
you will be able to define software configuration management and

4
00:00:11.140 --> 00:00:14.820
explain its importance. Define software configuration items,

5
00:00:15.540 --> 00:00:18.180
describe fault components of configuration management,

6
00:00:18.720 --> 00:00:22.300
define configuration repository, check-in checkout process,

7
00:00:22.720 --> 00:00:27.540
change management and version management, and elaborate for U S C M tools.

8
00:00:31.270 --> 00:00:32.110
Consider this scenario.

9
00:00:33.050 --> 00:00:36.750
Tom wants to document some information with regard to a b C bank.

10
00:00:37.330 --> 00:00:42.310
He downloads the file name product module ABC Bank from the server to

11
00:00:42.310 --> 00:00:45.950
his computer and makes changes at the same time.

12
00:00:46.440 --> 00:00:50.470
Pinky needs to make some changes to some information she had included in the

13
00:00:50.470 --> 00:00:53.950
same document. She downloads it and works on it.

14
00:00:55.960 --> 00:01:00.540
Tom is very happy he has done with his work and updated his work back to the

15
00:01:00.540 --> 00:01:01.373
server.

16
00:01:01.510 --> 00:01:05.700
Pinky also done with her work and she also updated her work back to the server.

17
00:01:07.950 --> 00:01:11.200
When Tom downloads the document from the server the next day,

18
00:01:11.420 --> 00:01:16.040
he is shocked the information he added to the document the previous day is

19
00:01:16.040 --> 00:01:19.040
missing. Can you guess why this happened? Yes,

20
00:01:19.040 --> 00:01:24.040
you correctly identified The problem and confusion is because both Tom

21
00:01:24.040 --> 00:01:28.080
and Pinky simultaneously accessed the document from the server and made the

22
00:01:28.080 --> 00:01:32.320
application in database, you would have heard about lost update problem.

23
00:01:32.670 --> 00:01:37.080
That is whoever has done the changes last, only that change would be reflected.

24
00:01:37.080 --> 00:01:42.000
The other one is lost. The same thing can happen in software development.

25
00:01:43.120 --> 00:01:47.440
Software development has lots of artifacts, Cesar rest design documents,

26
00:01:47.780 --> 00:01:50.320
source code testing reports, et cetera.

27
00:01:50.890 --> 00:01:54.960
These artifacts need to be accessed and modified by multiple team members.

28
00:01:55.940 --> 00:01:59.080
So how do we manage this change? Yes,

29
00:01:59.360 --> 00:02:02.280
software configuration management is the best choice for it.

30
00:02:03.010 --> 00:02:06.400
Let's discuss more about configuration management in this session.

31
00:02:08.970 --> 00:02:11.950
Before proceeding with software configuration management,

32
00:02:12.000 --> 00:02:14.350
let's try to understand what is configuration.

33
00:02:15.310 --> 00:02:19.350
Configuration specifies the arrangement of functional units according to their

34
00:02:19.350 --> 00:02:20.183
characteristics.

35
00:02:21.030 --> 00:02:25.390
Configuration affects the function and performance of the entire system as

36
00:02:25.390 --> 00:02:27.190
elaborated in the previous scenario.

37
00:02:27.910 --> 00:02:31.470
Multiple confusions exist when software development is done in team.

38
00:02:31.780 --> 00:02:36.310
Like are all changes done by team members reflected in the repository?

39
00:02:36.890 --> 00:02:37.990
Who did what change?

40
00:02:38.090 --> 00:02:42.630
At what time is it possible to revert back to the previous version of the code

41
00:02:42.650 --> 00:02:43.483
or project?

42
00:02:44.310 --> 00:02:48.670
Configuration management helps to minimize these confusions by coordinating the

43
00:02:48.870 --> 00:02:50.550
software development, by tracking,

44
00:02:50.900 --> 00:02:53.630
modifying and controlling changes to the software.

45
00:02:54.340 --> 00:02:58.630
That is their CMM activities are to identify the change, control

46
00:02:58.690 --> 00:03:02.560
The change, ensure that the changes are being properly implemented,

47
00:03:02.780 --> 00:03:06.160
and also report the changes to others who are involved in it.

48
00:03:06.820 --> 00:03:10.960
The main name of S C M is to maximize the productivity by minimizing the

49
00:03:11.200 --> 00:03:14.400
mistakes that can occur when coordinating software development.

50
00:03:16.870 --> 00:03:19.290
Why software configuration management.

51
00:03:20.080 --> 00:03:24.890
Most projects in IT industry are complex and involves multiple people to work

52
00:03:24.910 --> 00:03:26.890
on a single product software,

53
00:03:26.980 --> 00:03:31.170
which is continually updating by the team who may be geographically distributed

54
00:03:31.310 --> 00:03:34.450
and work concurrently needs mode coordination.

55
00:03:35.060 --> 00:03:38.970
There will be conflicts in code when changes are made by all in the team.

56
00:03:39.920 --> 00:03:40.210
Also,

57
00:03:40.210 --> 00:03:44.650
there will be communication gap when changes are made the solution for these

58
00:03:44.650 --> 00:03:45.483
problems.

59
00:03:45.930 --> 00:03:50.850
Software configuration management S C M process is also beneficial to

60
00:03:50.850 --> 00:03:53.850
control the costs involved in making changes to a system.

61
00:03:54.670 --> 00:03:59.410
We again and again reiterate the complexity and issues in software development

62
00:03:59.920 --> 00:04:03.010
because their CMM provides a solution for this problem.

63
00:04:05.380 --> 00:04:09.500
Software configuration will be needed when new versions of software systems are

64
00:04:09.500 --> 00:04:10.940
created as they get changed.

65
00:04:11.250 --> 00:04:15.780
Changes may be made to make the product work for different oss or to offer

66
00:04:15.780 --> 00:04:20.100
different functionalities that are not present in the previous version might be

67
00:04:20.100 --> 00:04:23.980
needed or the current version might need to be tailored for particular user

68
00:04:23.980 --> 00:04:24.813
requirements.

69
00:04:25.860 --> 00:04:29.820
Configuration management is responsible for managing and controlling the costs

70
00:04:29.880 --> 00:04:32.540
and effort involved in making changes to a system.

71
00:04:33.910 --> 00:04:38.850
The various artifacts that can be managed under S C M R specifications

72
00:04:38.880 --> 00:04:43.490
like S R S or use cases, design testing reports and so on.

73
00:04:44.240 --> 00:04:48.140
User documentation test, data code,

74
00:04:48.450 --> 00:04:51.540
executables tools, libraries, user manual.

75
00:04:52.090 --> 00:04:55.300
When we are able to track and control every artifact,

76
00:04:55.330 --> 00:04:57.540
then S C M is said to be effective.

77
00:04:59.430 --> 00:05:03.510
Software configuration management plan starts during the early phases of a

78
00:05:03.510 --> 00:05:04.343
project.

79
00:05:04.650 --> 00:05:08.830
The outcome of the S C M planning phase is the software configuration management

80
00:05:08.900 --> 00:05:12.430
plan. S C M P. This plan might not be frozen.

81
00:05:13.330 --> 00:05:16.310
It can be extended or revised in due course of the project.

82
00:05:17.590 --> 00:05:22.310
Software configuration management plan defines the artifacts to be managed

83
00:05:22.360 --> 00:05:23.390
along with the code.

84
00:05:24.050 --> 00:05:27.950
Who takes responsibility for the configuration management procedures and

85
00:05:28.310 --> 00:05:29.230
creation of baselines.

86
00:05:30.070 --> 00:05:34.950
A baseline is a formally reviewed and approved document by the management that

87
00:05:35.010 --> 00:05:37.590
can be used as the basis for the further development.

88
00:05:38.410 --> 00:05:40.950
Any change to it has to come informal way.

89
00:05:41.370 --> 00:05:46.230
It also defines the policies for change control and version management defines

90
00:05:46.230 --> 00:05:49.750
the CMM records which must be maintained. And finally,

91
00:05:50.350 --> 00:05:54.950
SS C M specifies the tools which should be used to assist the CM process and any

92
00:05:54.980 --> 00:05:56.430
limitations on their use.

93
00:05:59.230 --> 00:06:02.190
Software configuration items are not only source files,

94
00:06:02.330 --> 00:06:07.190
but all types of documents. In some projects, not only software,

95
00:06:07.210 --> 00:06:12.110
but also hardware configuration items such as C P Ss hard disks also has

96
00:06:12.110 --> 00:06:13.150
to be put under control.

97
00:06:14.070 --> 00:06:17.830
Document naming schemes should be defined so that the related documents have

98
00:06:17.830 --> 00:06:18.663
related names.

99
00:06:19.310 --> 00:06:23.310
A hierarchical scheme with multi-level names is the one that is used more

100
00:06:23.630 --> 00:06:28.290
frequently. Configuration management has four components.

101
00:06:29.010 --> 00:06:31.650
Configuration identification, change management,

102
00:06:32.250 --> 00:06:34.890
configuration status accounting and configuration.

103
00:06:34.980 --> 00:06:39.730
Audit configuration identification identifies the configuration

104
00:06:39.740 --> 00:06:44.370
items and developing method to uniquely label each configuration item with a

105
00:06:44.370 --> 00:06:48.770
unique identifiers. Everything in this world changes except change.

106
00:06:49.470 --> 00:06:53.650
Change management involves in tracking and controlling the changes in all the

107
00:06:53.650 --> 00:06:57.290
deliverables. During the development configuration status,

108
00:06:57.390 --> 00:07:01.890
he counting records and reports all the changes made to the configuration item,

109
00:07:02.030 --> 00:07:05.530
the status and various information about the configuration item.

110
00:07:06.650 --> 00:07:10.250
Configuration audit is responsible for verifying the correctness of the product

111
00:07:10.670 --> 00:07:15.490
and its components against various specifications to ensure conformance to

112
00:07:15.490 --> 00:07:20.340
requirements, to control and manage the configuration items,

113
00:07:20.520 --> 00:07:24.260
we name and manage each object using the object oriented approach.

114
00:07:24.990 --> 00:07:28.740
There are two types of objects, base object and aggregate object.

115
00:07:29.420 --> 00:07:33.140
A base object is created by a software engineer during analysis,

116
00:07:33.520 --> 00:07:35.340
design code or test

117
00:07:37.920 --> 00:07:39.010
aggregate object.

118
00:07:39.790 --> 00:07:44.010
An aggregate object is a collection of basic objects and other aggregate

119
00:07:44.080 --> 00:07:44.913
objects.

120
00:07:46.270 --> 00:07:50.310
Baseline is a any document or product that has been formally reviewed and agreed

121
00:07:50.310 --> 00:07:51.310
by a q a team,

122
00:07:51.570 --> 00:07:55.790
and that can be changed only through formal change control procedures.

123
00:07:56.490 --> 00:07:59.510
The baseline serves as the base for further development.

124
00:08:00.350 --> 00:08:05.350
Examples for baselines are the A P I has been completely been defined.

125
00:08:05.650 --> 00:08:07.390
The bodies of the methods are empty.

126
00:08:08.050 --> 00:08:10.910
All data access methods are implemented and tested.

127
00:08:11.770 --> 00:08:13.670
The GU U i is implemented.

128
00:08:14.340 --> 00:08:17.670
Evolution graph describes the change history of an object.

129
00:08:18.330 --> 00:08:22.430
The diagram in the slide depicts the evolution graph for an artifact.

130
00:08:23.210 --> 00:08:26.110
It shows the history of changes made to that artifact.

131
00:08:27.990 --> 00:08:32.810
As system is developed in that flow, a series of baselines are developed.

132
00:08:33.080 --> 00:08:37.130
Developmental baseline goal is to coordinate engineering activities.

133
00:08:37.930 --> 00:08:42.290
Functional baseline goal is to get customer experiences with functional system

134
00:08:42.470 --> 00:08:46.610
and product. Baseline goal is to coordinate sales and customer support.

135
00:08:47.080 --> 00:08:51.730
Many naming schemes exist for baseline and a most commonly used is a three

136
00:08:51.780 --> 00:08:54.850
digit scheme, first digit for release to the client.

137
00:08:55.260 --> 00:08:57.640
Second represents the version for developer,

138
00:08:57.660 --> 00:09:00.720
and third is also for developer for small revision made.

139
00:09:02.120 --> 00:09:04.140
Now where all the cis are stored.

140
00:09:04.900 --> 00:09:09.060
Configuration repository is a database managed by the server that stores all the

141
00:09:09.260 --> 00:09:10.860
configuration management information.

142
00:09:11.440 --> 00:09:15.060
By maintaining all the information in a centralized repository,

143
00:09:15.160 --> 00:09:18.980
it helps us to understand who has a particular system version,

144
00:09:19.530 --> 00:09:22.260
what platform is required for a particular version.

145
00:09:22.770 --> 00:09:25.900
What versions are affected by a change to component text?

146
00:09:26.480 --> 00:09:28.740
How many reported fault inversion t

147
00:09:30.770 --> 00:09:35.310
The configuration items available in the configuration management system will be

148
00:09:35.310 --> 00:09:37.110
in the read-only mode by default.

149
00:09:37.520 --> 00:09:42.350
Check in an operation used to make a developer's object version available to

150
00:09:42.350 --> 00:09:43.183
other users.

151
00:09:43.670 --> 00:09:48.150
A process that creates a new version of an object from an existing version

152
00:09:48.170 --> 00:09:49.350
stored in the database.

153
00:09:49.720 --> 00:09:54.150
Check out developers check out objects so they can work on them.

154
00:09:56.010 --> 00:09:59.750
The diagram in this page depicts how check-in and checkout happens.

155
00:10:00.810 --> 00:10:03.700
Nothing in this world is permanent except change.

156
00:10:04.160 --> 00:10:08.460
Change occurs anytime during the software development and change management is

157
00:10:08.460 --> 00:10:13.180
the systematic approach to manage change. Activities in change management,

158
00:10:13.930 --> 00:10:18.100
filtering changes, managing changes and the change process.

159
00:10:18.970 --> 00:10:22.740
Reviewing and closing of requests for change are FCS

160
00:10:23.350 --> 00:10:26.500
management reporting and providing management information.

161
00:10:27.820 --> 00:10:31.790
When two people in a group try to access a same file and make changes,

162
00:10:31.940 --> 00:10:33.550
then one would overwrite the other.

163
00:10:34.340 --> 00:10:38.750
This can be solved using the synchronization control mechanism of configuration

164
00:10:38.800 --> 00:10:39.633
management.

165
00:10:40.250 --> 00:10:44.550
It ensures that parallel changes performed by two different people don't

166
00:10:44.550 --> 00:10:46.950
overwrite one another. To make this possible,

167
00:10:47.250 --> 00:10:50.110
he can obtain a lock on the object in the database.

168
00:10:50.900 --> 00:10:55.190
This will disable others from accessing or updating that object until the

169
00:10:55.190 --> 00:10:59.310
currently checked out version has been replaced. Thereby releasing the lock

170
00:11:03.950 --> 00:11:08.360
changes are inevitable. They happen a lot in software development too.

171
00:11:08.990 --> 00:11:11.280
When a software system is being developed,

172
00:11:11.430 --> 00:11:14.160
changes may be requested going to many reasons.

173
00:11:15.180 --> 00:11:17.280
The client may have some new requirements.

174
00:11:17.780 --> 00:11:21.960
The domain legal expert in the development team may propose some requirements to

175
00:11:21.960 --> 00:11:24.960
meet some new statutory regulation and so on.

176
00:11:25.630 --> 00:11:27.120
When changes are requested,

177
00:11:27.270 --> 00:11:30.000
they are not passed on straight away to the development team.

178
00:11:30.950 --> 00:11:35.560
Each change is evaluated to ascertain whether it is needed and what its effects

179
00:11:35.630 --> 00:11:38.160
will be in the project. To get this done,

180
00:11:38.540 --> 00:11:43.120
all change requests will be sent to change control board C C B or

181
00:11:43.400 --> 00:11:46.000
software change control board S C C B.

182
00:11:46.380 --> 00:11:49.760
It is a committee that accepts the change requests, analyze it,

183
00:11:49.980 --> 00:11:52.760
and take decision whether or not propose change to

184
00:11:52.760 --> 00:11:54.840
A software project should be implemented.

185
00:11:55.580 --> 00:11:59.360
The change control board is composed of project stakeholders or their

186
00:11:59.360 --> 00:12:00.200
representatives.

187
00:12:00.900 --> 00:12:04.880
The authority of the change control board may vary from project to project.

188
00:12:05.620 --> 00:12:09.280
The decision taken by this boat will be accepted as final and binding.

189
00:12:09.980 --> 00:12:10.840
If it's accepted,

190
00:12:11.180 --> 00:12:15.120
the code will be given for the developer to make the relevant changes else.

191
00:12:15.140 --> 00:12:17.800
It will be intimated to the client that it is rejected.

192
00:12:19.080 --> 00:12:23.860
The change control process comprises of three phases, evaluation phase,

193
00:12:24.420 --> 00:12:26.860
resolution phase, and finally the verification phase.

194
00:12:27.450 --> 00:12:31.860
When a change is to be made at his identified and submitted by the client to the

195
00:12:31.860 --> 00:12:35.820
change control board, it is then evaluated by the C, c B.

196
00:12:36.410 --> 00:12:41.100
They analyze the impact of the change and the cost. Also. If it's feasible,

197
00:12:41.290 --> 00:12:43.260
then they approve the change mark,

198
00:12:43.260 --> 00:12:46.780
the change request as opened and hand over it to the development team.

199
00:12:47.570 --> 00:12:51.420
They plan for the change and implement it and test for its correctness.

200
00:12:52.120 --> 00:12:56.580
The tester verifies if the changes are implemented correctly. If yes,

201
00:12:56.880 --> 00:13:01.300
the verification process is approved and change request is closed. If not,

202
00:13:01.300 --> 00:13:04.940
they reopen the change request and give it back to the development team.

203
00:13:06.960 --> 00:13:10.900
As we all know, software development will be done by team of persons,

204
00:13:11.720 --> 00:13:16.380
so frequent changes will happen in that case. Whenever changes are made,

205
00:13:16.380 --> 00:13:18.940
we have to maintain the various versions of the file.

206
00:13:19.690 --> 00:13:22.260
This is possible by using version management.

207
00:13:22.490 --> 00:13:26.940
Version control mechanism can be used to maintain multiple versions of a

208
00:13:27.220 --> 00:13:31.780
software project or files or documents. Hence, tracking the changes is easier.

209
00:13:32.810 --> 00:13:33.120
Also,

210
00:13:33.120 --> 00:13:37.340
if a person wants to edit a file and it should not be accessed by others in the

211
00:13:37.340 --> 00:13:37.890
group,

212
00:13:37.890 --> 00:13:42.460
it's possible by providing a lock to that file as and when the work progresses.

213
00:13:42.460 --> 00:13:47.180
It can be saved in the repository and can be accessed by anyone in the group

214
00:13:47.280 --> 00:13:49.540
as either read only or for making changes.

215
00:13:52.470 --> 00:13:53.910
Benefits of version management,

216
00:13:54.620 --> 00:13:57.950
automatic backup is a main advantage of version management.

217
00:13:58.450 --> 00:14:01.870
If a file is changed and we want to roll back to the previous version,

218
00:14:02.260 --> 00:14:06.990
it's possible using this. If more than one person works on a same file,

219
00:14:07.330 --> 00:14:10.110
the changes can be recorded without any conflict.

220
00:14:10.810 --> 00:14:14.990
To highlight the differences comparison of the two versions of a file is

221
00:14:15.230 --> 00:14:16.270
possible. Also,

222
00:14:16.270 --> 00:14:19.830
it is possible to lock a file so that when it is modified by a user,

223
00:14:19.890 --> 00:14:21.790
it cannot be accessed by other user.

224
00:14:22.140 --> 00:14:27.070
Thus forcing serialized change to any given file when a person in

225
00:14:27.070 --> 00:14:29.510
the team wants his code to work in isolation.

226
00:14:29.860 --> 00:14:32.270
It's also possible by creating branches.

227
00:14:33.390 --> 00:14:38.110
Maintain an instant audit trail on each and every file, like versions, modified,

228
00:14:38.110 --> 00:14:39.270
date modifier,

229
00:14:39.490 --> 00:14:43.830
and any additional amount of metadata system provides for and whichever we

230
00:14:43.830 --> 00:14:44.670
choose to implement.

231
00:14:47.410 --> 00:14:49.970
Features supported in any change management, you are

232
00:14:50.560 --> 00:14:55.320
Concurrency management when same file is edited by multiple persons at the same

233
00:14:55.320 --> 00:14:56.153
time.

234
00:14:56.270 --> 00:15:00.600
Version control S C M either saves all the changes made or users

235
00:15:01.000 --> 00:15:03.520
archiving method. Because of this feature,

236
00:15:03.900 --> 00:15:08.720
in case of any issues can roll back to previous versions. Synchronization,

237
00:15:09.230 --> 00:15:13.680
user checkout the files needed works on those files and checks in the changes

238
00:15:13.910 --> 00:15:16.200
made to the repository. Thus,

239
00:15:16.230 --> 00:15:20.720
user can synchronize changes made in his local with the changes made by other

240
00:15:20.720 --> 00:15:21.720
members in the team.

241
00:15:23.030 --> 00:15:26.000
This page depicts few S C M tools used in the market.

242
00:15:27.930 --> 00:15:31.440
Let's understand few S C M terms to be familiar with.

243
00:15:32.400 --> 00:15:35.760
Repository or repo is the database where files are stored.

244
00:15:36.060 --> 00:15:38.680
Server is the system that stores the repository.

245
00:15:39.140 --> 00:15:42.520
Client is the system that connects to the server. Working,

246
00:15:42.700 --> 00:15:46.840
set or working copy is local directory of files where changes are made.

247
00:15:47.610 --> 00:15:52.040
Trunk on main is the primary location for code in the repo add.

248
00:15:52.040 --> 00:15:54.560
When we put a file into the repo for the first time,

249
00:15:54.830 --> 00:15:57.880
that is begin tracking it with version control.

250
00:15:59.330 --> 00:16:04.290
Revision represents the version of file V one, V two, V three, et cetera.

251
00:16:04.720 --> 00:16:07.530
Head means the latest revision in the repo.

252
00:16:07.530 --> 00:16:12.250
Latest checkout means download a file from the repo check in means

253
00:16:12.350 --> 00:16:15.410
upload a file to the repository. If it has changed,

254
00:16:15.950 --> 00:16:20.210
the file gets a new revision number and people can check out the latest one.

255
00:16:20.820 --> 00:16:24.330
Check in message means a short message describing what was changed.

256
00:16:26.130 --> 00:16:28.140
Each time we check in a new version,

257
00:16:28.520 --> 00:16:31.260
we get a new revision as shown here,

258
00:16:31.320 --> 00:16:34.700
it is a one R two or three, et cetera.

259
00:16:35.320 --> 00:16:38.900
To continue to work in the project, we need to first check out the project,

260
00:16:39.290 --> 00:16:40.340
make the needed changes,

261
00:16:40.720 --> 00:16:44.820
and check in so that all in the team are able to get the changes made to tape

262
00:16:44.820 --> 00:16:48.940
project. Assume we have checked in a project later,

263
00:16:49.040 --> 00:16:52.740
we feel that the changes are not needed. In such case,

264
00:16:53.040 --> 00:16:55.140
we can revert back to the previous version.

265
00:16:55.930 --> 00:16:59.540
When we check out a project by default we get the latest version.

266
00:17:00.320 --> 00:17:04.490
If any other version is needed, we can specify that specific version

267
00:17:06.230 --> 00:17:08.330
as and when we make changes and check in.

268
00:17:08.510 --> 00:17:10.610
The main no trunk has a history of changes.

269
00:17:11.620 --> 00:17:15.890
Diffs are the changes made by us while editing conflicts can arise.

270
00:17:15.920 --> 00:17:20.850
When changes overlap, assume both Tom and Sam has checked out the project.

271
00:17:22.030 --> 00:17:26.890
Tom wants to remove eggs and replace it with cheese. Minor eggs plus cheese,

272
00:17:27.150 --> 00:17:32.130
and Sam wants to replace eggs with a hot dog, minor eggs, plus hot dog.

273
00:17:32.870 --> 00:17:36.290
At this point, it's a race. If Tom checks in first,

274
00:17:36.560 --> 00:17:40.570
then that will be the changes that goes through and Sam can't make his change.

275
00:17:41.480 --> 00:17:44.050
When changes overlap and contradict like this,

276
00:17:44.390 --> 00:17:48.810
the version control system will report a conflict and not allow check in. It

277
00:17:48.810 --> 00:17:52.480
Is is up to the developer to check in a newer version that resolves this

278
00:17:52.720 --> 00:17:57.320
conflict either by reapplying the changes or override Tom changes with ours.

279
00:17:57.820 --> 00:17:58.653
So

280
00:18:01.620 --> 00:18:05.220
branches allow us to copy code into a separate folder so we can work with it

281
00:18:05.420 --> 00:18:07.900
separately. Since we are in a separate branch,

282
00:18:08.400 --> 00:18:12.100
we can work with the code in isolation by making the changes needed.

283
00:18:12.590 --> 00:18:14.900
These changes will not be affecting the team,

284
00:18:15.400 --> 00:18:19.980
but the branch history is under version control. Branching sounds simple,

285
00:18:20.270 --> 00:18:22.180
right? Well, it's not.

286
00:18:22.740 --> 00:18:26.460
Figuring out how to merge changes from one branch to another can be tricky.

287
00:18:27.190 --> 00:18:31.740
Let's say we want to get the rice feature from our experimental branch into the

288
00:18:31.740 --> 00:18:32.573
main line.

289
00:18:33.000 --> 00:18:37.740
How would we do this DEFAR six and R seven and apply that to the main line

290
00:18:38.510 --> 00:18:42.180
wrong? We only want to apply the changes that happened in the branch.

291
00:18:42.850 --> 00:18:47.420
That means we defer five and R six and apply that to the main drunk.

292
00:18:47.760 --> 00:18:49.580
If we dipped our six and R seven,

293
00:18:49.920 --> 00:18:54.060
we would lose the bread feature that was in Maine. This is a subtle point.

294
00:18:54.210 --> 00:18:59.020
Imagine peeling off the changes from the experimental branch plus rice and

295
00:18:59.020 --> 00:19:03.180
adding that to Maine. Maine may have had other changes, which is okay.

296
00:19:03.600 --> 00:19:05.780
We just want to insert the rise feature.

297
00:19:08.320 --> 00:19:12.740
The various activities of a developer in a SS C M environment are described in

298
00:19:12.740 --> 00:19:16.900
this page. To begin with, code is kept in a common repository.

299
00:19:17.590 --> 00:19:21.140
Developers pick up a working copy and work on their local machine.

300
00:19:21.640 --> 00:19:23.940
Having done few applications in the code,

301
00:19:24.190 --> 00:19:26.820
those changes are committed to the repository.

302
00:19:27.270 --> 00:19:31.860
Check if anyone has checked in the same file in the repository. If yes,

303
00:19:31.880 --> 00:19:33.700
and they have worked on the same file,

304
00:19:34.010 --> 00:19:37.820
then compare the conflicts and merge the changes as per the requirement.

305
00:19:38.470 --> 00:19:43.380
Check in the new version of files into the repository. Details of what, why,

306
00:19:43.570 --> 00:19:47.500
when, and by whom changes were made to the software is also preserved.

307
00:19:48.340 --> 00:19:51.380
Tracking the changes is a very simple task. With SS c m.

308
00:19:52.150 --> 00:19:53.770
Having completed this module,

309
00:19:54.190 --> 00:19:58.170
you will be able to define software configuration management.

310
00:19:58.680 --> 00:20:03.650
Explain the importance of SS c M. Define the configuration items.

311
00:20:04.730 --> 00:20:07.850
Describe the fault components of configuration management.

312
00:20:08.390 --> 00:20:11.290
Define check-in and checkout from repository.

313
00:20:11.880 --> 00:20:13.690
Explain change management.

314
00:20:14.280 --> 00:20:19.090
Explain the importance of version management. Elaborate few SS c m tools.

315
00:20:19.380 --> 00:20:19.810
Thank you.
