WEBVTT

1
00:00:01.130 --> 00:00:03.460
Welcome to the session on continuous

2
00:00:03.470 --> 00:00:05.840
integration and continuous delivery.

3
00:00:07.180 --> 00:00:10.110
Module objective. After completing this

4
00:00:10.120 --> 00:00:12.970
module you will be able to understand

5
00:00:12.980 --> 00:00:15.670
CI/CD Tools, CI/CD as a

6
00:00:15.680 --> 00:00:18.660
Service. Let us discuss on

7
00:00:18.670 --> 00:00:20.120
CI/CD tools.

8
00:00:23.750 --> 00:00:25.979
Bamboo is a continuous integration

9
00:00:26.029 --> 00:00:28.779
CI server that can be used to automate

10
00:00:28.789 --> 00:00:30.749
the release management for a software

11
00:00:30.759 --> 00:00:32.799
application, creating a continuous

12
00:00:32.809 --> 00:00:35.519
delivery pipeline. It was developed by

13
00:00:35.529 --> 00:00:38.379
Atlassian. Bamboo ties automated

14
00:00:38.389 --> 00:00:41.279
builds, tests and releases together in a

15
00:00:41.289 --> 00:00:43.659
single workflow by integrating with other

16
00:00:43.669 --> 00:00:45.799
Atlassian products such as Jira,

17
00:00:45.849 --> 00:00:48.709
Bitbucket and so on. People who

18
00:00:48.719 --> 00:00:51.039
want to utilize the branches safely done

19
00:00:51.049 --> 00:00:53.669
by CI server itself want easier

20
00:00:53.679 --> 00:00:56.169
deployment capability and are willing to

21
00:00:56.179 --> 00:00:58.229
use simple new. I should give it a try.

22
00:00:58.779 --> 00:01:01.099
With the Bamboo server you get end to end

23
00:01:01.109 --> 00:01:02.729
visibility into the release,

24
00:01:02.799 --> 00:01:05.609
implementation, quality and status with

25
00:01:05.619 --> 00:01:07.869
seamless integration of Jira and

26
00:01:07.879 --> 00:01:10.649
Bitbucket servers. It also comes with

27
00:01:10.659 --> 00:01:12.619
features such as built-in deployment

28
00:01:12.629 --> 00:01:15.109
support, automated merging and git

29
00:01:15.119 --> 00:01:17.708
branching. Bamboo is available for

30
00:01:17.718 --> 00:01:20.238
platforms. Such as Windows, Mac OS

31
00:01:20.248 --> 00:01:23.238
and Linux. For heavy usage,

32
00:01:23.248 --> 00:01:25.258
you can take advantage of remote build

33
00:01:25.268 --> 00:01:27.678
agents, including Elastic build agents

34
00:01:27.688 --> 00:01:29.218
like Amazon EC2.

35
00:01:30.378 --> 00:01:33.108
Bamboo provides automatic deployment to a

36
00:01:33.118 --> 00:01:35.728
server such as the App Store or Google

37
00:01:35.738 --> 00:01:38.688
Play. It provides an automated and

38
00:01:38.698 --> 00:01:41.458
reliable build/test process leaving

39
00:01:41.468 --> 00:01:43.808
you free to code more. You can deploy

40
00:01:43.818 --> 00:01:46.068
continuously, for example to User

41
00:01:46.078 --> 00:01:48.948
Acceptance Testing. UAT. Bamboo

42
00:01:48.958 --> 00:01:51.428
has a much user friendly approach with a

43
00:01:51.438 --> 00:01:53.588
need and intuitive user interface,

44
00:01:53.918 --> 00:01:56.768
so every time a new task is added, it

45
00:01:56.778 --> 00:01:58.728
provides proper guidance throughout the

46
00:01:58.738 --> 00:02:01.198
plans build and deployment states

47
00:02:01.488 --> 00:02:04.238
Bamboo supports built in Bitbucket Server

48
00:02:04.248 --> 00:02:06.857
integration. It supports built-

49
00:02:06.867 --> 00:02:08.667
in git branching workflows.

50
00:02:10.037 --> 00:02:12.447
The following are the features of Bamboo

51
00:02:12.657 --> 00:02:15.607
documentation, Bamboo provides good

52
00:02:15.617 --> 00:02:17.987
online documentation. platform

53
00:02:17.997 --> 00:02:20.647
dependency, Bamboo works on

54
00:02:20.737 --> 00:02:23.107
operating systems like Windows,

55
00:02:23.177 --> 00:02:25.727
Linux, Solaris. It works

56
00:02:25.737 --> 00:02:27.887
on browsers like Chrome,

57
00:02:27.937 --> 00:02:30.427
Firefox, Safari, Edge,

58
00:02:30.637 --> 00:02:33.527
plugin support, Few plugins available

59
00:02:33.537 --> 00:02:35.867
and supported. compatibility,

60
00:02:36.157 --> 00:02:39.007
Bamboo supports built in JIRA software

61
00:02:39.017 --> 00:02:41.437
integration. Built-in Git branching

62
00:02:41.447 --> 00:02:43.797
workflows, Built-in Bitbucket Server

63
00:02:43.807 --> 00:02:46.077
integration and built-in deployment

64
00:02:46.087 --> 00:02:48.617
projects. It also supports REST

65
00:02:48.627 --> 00:02:50.527
API and test automation.

66
00:02:51.937 --> 00:02:54.207
Bamboo is the central management server

67
00:02:54.297 --> 00:02:56.976
that schedules and coordinates all work.

68
00:02:57.096 --> 00:03:00.026
Bamboo itself has interfaces and plugins

69
00:03:00.036 --> 00:03:02.846
for lots of types of work. Bamboo first

70
00:03:02.856 --> 00:03:04.856
gets your source from a source

71
00:03:04.866 --> 00:03:07.706
repository. Bamboo starts the build.

72
00:03:07.716 --> 00:03:09.986
That can be done by calling something

73
00:03:10.076 --> 00:03:12.286
like Ms. Build to build your Visual

74
00:03:12.296 --> 00:03:14.686
Studio solution or even to call your

75
00:03:14.696 --> 00:03:17.626
compiler and linker. Whatever you use,

76
00:03:17.736 --> 00:03:20.446
once your solution or project is built,

77
00:03:20.516 --> 00:03:23.246
you have artifacts. Like build results,

78
00:03:23.316 --> 00:03:26.126
config files, and so on. You can

79
00:03:26.136 --> 00:03:28.106
do additional things with the build

80
00:03:28.116 --> 00:03:30.726
artifacts. Zip up into a zip

81
00:03:30.736 --> 00:03:33.626
file and copy them somewhere. Run an

82
00:03:33.636 --> 00:03:36.076
install builder on them and create an

83
00:03:36.086 --> 00:03:38.986
MSI. Install them on a test server

84
00:03:39.096 --> 00:03:41.346
to make sure everything installs just

85
00:03:41.356 --> 00:03:44.146
fine. Bamboo provides a web front

86
00:03:44.156 --> 00:03:46.485
end for configuration and for reporting

87
00:03:46.495 --> 00:03:47.755
the status of bills.

88
00:03:49.155 --> 00:03:51.765
Bamboo uses the concept of a plan

89
00:03:51.875 --> 00:03:54.645
with jobs and tasks to configure and

90
00:03:54.655 --> 00:03:56.735
order the actions in the workflow.

91
00:03:56.915 --> 00:03:59.665
Project. Has none One or

92
00:03:59.675 --> 00:04:02.605
more plans. Provides reporting across

93
00:04:02.615 --> 00:04:05.315
all plans in the project. Provides links

94
00:04:05.325 --> 00:04:08.005
to other applications. Allows setting up

95
00:04:08.015 --> 00:04:09.915
permissions for all the plans it

96
00:04:09.925 --> 00:04:12.515
contains. Plan has a single

97
00:04:12.525 --> 00:04:15.485
stage by default, but can be used to

98
00:04:15.495 --> 00:04:17.745
group jobs into multiple stages.

99
00:04:18.055 --> 00:04:20.575
Processes a series of. One or more stages

100
00:04:20.665 --> 00:04:22.645
that are run sequentially using the same

101
00:04:22.655 --> 00:04:25.195
repository. Specifies the default

102
00:04:25.205 --> 00:04:28.015
repository. Specifies how the build

103
00:04:28.025 --> 00:04:29.665
is triggered and the triggering

104
00:04:29.675 --> 00:04:32.175
dependencies between the plan and other

105
00:04:32.185 --> 00:04:34.735
plans in the project. Specifies

106
00:04:34.805 --> 00:04:36.854
notification of bill results.

107
00:04:37.164 --> 00:04:39.974
Specifies who has permission to view and

108
00:04:39.984 --> 00:04:41.894
configure the plan and its jobs.

109
00:04:42.224 --> 00:04:45.034
Stage by default has a single job,

110
00:04:45.084 --> 00:04:47.514
but can be used to group multiple jobs.

111
00:04:47.824 --> 00:04:50.664
Processes its jobs. In parallel on

112
00:04:50.674 --> 00:04:53.264
multiple agents must successfully

113
00:04:53.274 --> 00:04:55.744
complete all its jobs before the next

114
00:04:55.754 --> 00:04:58.344
stage in the plan can be processed. May

115
00:04:58.354 --> 00:05:00.764
produce artifacts that can be made

116
00:05:00.774 --> 00:05:03.374
available for use by a subsequent stage

117
00:05:03.594 --> 00:05:06.404
job. Processes a series of 1 or more

118
00:05:06.414 --> 00:05:08.824
tasks that are run sequentially on the

119
00:05:08.834 --> 00:05:11.504
same agent. Controls the order in which

120
00:05:11.514 --> 00:05:13.624
tasks are performed. Collects the

121
00:05:13.634 --> 00:05:15.824
requirements of individual tasks in the

122
00:05:15.834 --> 00:05:18.464
job so that these requirements can be

123
00:05:18.474 --> 00:05:20.324
matched with the agent capabilities.

124
00:05:20.634 --> 00:05:23.324
Defines the artifacts that the build will

125
00:05:23.334 --> 00:05:26.223
produce. Can only use artifacts produced

126
00:05:26.233 --> 00:05:29.063
in a previous stage. Specifies any

127
00:05:29.073 --> 00:05:31.303
labels with which the build results or

128
00:05:31.313 --> 00:05:34.063
build artifacts will be tagged. Task.

129
00:05:34.313 --> 00:05:37.003
It is a small, discrete unit of work such

130
00:05:37.013 --> 00:05:39.383
as source code checkout, executing a

131
00:05:39.393 --> 00:05:42.243
Maven goal, running a script, or parsing

132
00:05:42.253 --> 00:05:44.843
test results. It is run sequentially

133
00:05:44.853 --> 00:05:46.903
within a job on a Bamboo working

134
00:05:46.913 --> 00:05:49.663
directory. GitLab CI

135
00:05:49.673 --> 00:05:52.233
CD was integrated into the main GitLab

136
00:05:52.243 --> 00:05:55.133
software with the GitLab 8.0 release in

137
00:05:55.143 --> 00:05:57.893
September 2015. A GitLab

138
00:05:57.903 --> 00:06:00.233
CICD server can manage more than

139
00:06:00.243 --> 00:06:02.973
25,000 users. GitLab

140
00:06:02.983 --> 00:06:05.823
CICD and GitLab are written in Ruby

141
00:06:05.833 --> 00:06:08.453
and Go and launched under an MIT license.

142
00:06:08.723 --> 00:06:11.493
GitLab CICD is a UI based

143
00:06:11.503 --> 00:06:13.353
web application that manages your

144
00:06:13.363 --> 00:06:15.913
projects or bills. It is also

145
00:06:15.923 --> 00:06:18.752
accessible through APIs. Git

146
00:06:18.822 --> 00:06:21.432
Lab run a process builds Git Lab

147
00:06:21.442 --> 00:06:23.992
CICD also provides planning,

148
00:06:24.062 --> 00:06:26.552
packaging, SCM release

149
00:06:26.642 --> 00:06:28.892
configuration, and scrutinizing in

150
00:06:28.902 --> 00:06:31.902
addition to CICD that other CICD

151
00:06:31.912 --> 00:06:34.882
tools are focused on. GitLab CI

152
00:06:34.892 --> 00:06:37.762
CD also provides repositories. Thus

153
00:06:37.772 --> 00:06:40.632
the integration of GitLab CICD is quite

154
00:06:40.642 --> 00:06:43.402
simple and straightforward. GitLab

155
00:06:43.412 --> 00:06:46.062
allows you to trigger builds, run tests

156
00:06:46.152 --> 00:06:48.682
and deploy code with each commit or push.

157
00:06:49.112 --> 00:06:51.462
You can build jobs in a virtual machine,

158
00:06:51.572 --> 00:06:53.982
docker container or on another server.

159
00:06:55.372 --> 00:06:58.142
The main benefit of using GitLab is that

160
00:06:58.152 --> 00:06:59.952
it allows all the team members to

161
00:06:59.962 --> 00:07:01.682
collaborate in every phase of the

162
00:07:01.692 --> 00:07:04.192
project. GitLab is used by

163
00:07:04.202 --> 00:07:06.561
developers for the following Dev and

164
00:07:06.571 --> 00:07:09.441
OPS teams working together. Everyone

165
00:07:09.451 --> 00:07:11.621
working in the same system, Shared

166
00:07:11.631 --> 00:07:13.701
feedback loops. No messy

167
00:07:13.711 --> 00:07:16.621
integrations, only single application

168
00:07:16.671 --> 00:07:19.521
for the entire DevOps cycle GitLab

169
00:07:19.531 --> 00:07:21.761
is the first application built to cover

170
00:07:21.771 --> 00:07:24.441
all stages of the DevOps cycle. This

171
00:07:24.451 --> 00:07:27.161
means product development, QA

172
00:07:27.261 --> 00:07:29.461
and OPS teams can all work together

173
00:07:29.471 --> 00:07:31.421
concurrently, making the software

174
00:07:31.431 --> 00:07:33.501
development life cycle three times

175
00:07:33.511 --> 00:07:36.461
faster. Built in continuous integration

176
00:07:36.551 --> 00:07:38.781
and continuous delivery features make it

177
00:07:38.791 --> 00:07:41.291
seamless. To go from a code change to a

178
00:07:41.301 --> 00:07:44.041
running pipeline. On top of that,

179
00:07:44.091 --> 00:07:46.731
GitLab has project management, issue

180
00:07:46.741 --> 00:07:49.061
tracking and free private repository

181
00:07:49.071 --> 00:07:51.481
hosting to make it easier to plan and

182
00:07:51.491 --> 00:07:54.341
manage projects. Since GitLab is

183
00:07:54.351 --> 00:07:57.040
open, it has great integrations with many

184
00:07:57.050 --> 00:07:58.920
other tools, including container

185
00:07:58.930 --> 00:08:01.460
orchestration tools like Kubernetes.

186
00:08:01.810 --> 00:08:04.360
Security is built in. Some of our

187
00:08:04.370 --> 00:08:07.160
integrated security features include

188
00:08:07.210 --> 00:08:10.120
dependency scanning, static application,

189
00:08:10.130 --> 00:08:12.560
security testing, SAST,

190
00:08:12.880 --> 00:08:15.360
dynamic application security testing,

191
00:08:15.640 --> 00:08:18.560
container scanning. In GitLab, every

192
00:08:18.570 --> 00:08:20.980
code change can be scanned automatically.

193
00:08:21.200 --> 00:08:24.050
Transparency is by default. Building

194
00:08:24.060 --> 00:08:26.170
and maintaining open and honest

195
00:08:26.180 --> 00:08:28.310
relationships with users is at the core

196
00:08:28.320 --> 00:08:31.290
of our value system. Everything we do is

197
00:08:31.300 --> 00:08:33.750
public by default. Everyone can

198
00:08:33.760 --> 00:08:36.470
contribute. Anyone can create an issue to

199
00:08:36.480 --> 00:08:39.020
improve Git Lab. We welcome

200
00:08:39.030 --> 00:08:41.750
community celebrations and celebrate them

201
00:08:41.760 --> 00:08:44.200
by designating a Most Valuable Person

202
00:08:44.320 --> 00:08:47.009
MVP every month With a

203
00:08:47.019 --> 00:08:49.949
public issue tracker, anyone can propose,

204
00:08:49.999 --> 00:08:52.449
contribute to, and discuss GitLabs

205
00:08:52.459 --> 00:08:55.409
features. The following are the

206
00:08:55.419 --> 00:08:57.769
features of Git Lab. High

207
00:08:57.779 --> 00:09:00.709
Availability deployments. It is widely

208
00:09:00.719 --> 00:09:02.789
used and one of the newest open source

209
00:09:02.799 --> 00:09:04.749
CICD tools available.

210
00:09:05.279 --> 00:09:07.669
Installation as well as configuration for

211
00:09:07.679 --> 00:09:10.589
GitLab CICD easy. It

212
00:09:10.599 --> 00:09:12.989
is a free and self hosted CI tool built

213
00:09:12.999 --> 00:09:15.919
in to GitLab. GitLab

214
00:09:15.929 --> 00:09:18.529
CICD gradually evolved as one of the most

215
00:09:18.539 --> 00:09:21.029
popular free CICD tools used for

216
00:09:21.039 --> 00:09:23.469
automation of deployments. Multi

217
00:09:23.479 --> 00:09:25.989
environment, multi platform, multi

218
00:09:25.999 --> 00:09:28.409
language GitLab

219
00:09:28.419 --> 00:09:31.279
CICD can be used to execute build scripts

220
00:09:31.289 --> 00:09:33.599
on any platform that supports Go,

221
00:09:33.649 --> 00:09:35.819
including Windows, Mac OS,

222
00:09:35.929 --> 00:09:38.818
Unix, etc. It works with any language

223
00:09:38.828 --> 00:09:41.078
including PHP, Python,

224
00:09:41.228 --> 00:09:43.858
Java, C, Ruby, etc.

225
00:09:43.868 --> 00:09:46.438
GitLab CICD Cloud versus self

226
00:09:46.448 --> 00:09:49.378
hosted, You can use GitLab Cloud on

227
00:09:49.428 --> 00:09:52.238
gitlab.com or you can

228
00:09:52.248 --> 00:09:55.208
self host it. You can self host it on

229
00:09:55.218 --> 00:09:57.248
the infrastructure as well as on a bare

230
00:09:57.258 --> 00:09:59.738
metal server or in Kubernetes on a public

231
00:09:59.748 --> 00:10:02.548
cloud. Integrations Git

232
00:10:02.598 --> 00:10:04.888
Lab CI can be used with GitHub,

233
00:10:04.948 --> 00:10:07.688
Bitbucket or any other Git based server.

234
00:10:08.008 --> 00:10:10.648
GitLab platform can also be used with

235
00:10:10.658 --> 00:10:13.028
Jenkins CI, HipChat,

236
00:10:13.098 --> 00:10:15.298
Slack, Vault and several other

237
00:10:15.308 --> 00:10:17.588
integrations are available to streamline

238
00:10:17.598 --> 00:10:19.768
project life cycle management,

239
00:10:19.958 --> 00:10:22.608
security and performance. Auto

240
00:10:22.618 --> 00:10:25.548
scaling, Auto DevOps, Parallel bills

241
00:10:25.618 --> 00:10:27.967
and container registry features aimed to

242
00:10:27.977 --> 00:10:30.977
improve the performance of GitLab CICD

243
00:10:31.307 --> 00:10:34.217
GitLab provides dependency scanning, fuzz

244
00:10:34.227 --> 00:10:36.997
testing, secret detection and license

245
00:10:37.007 --> 00:10:39.377
compliance features for delivering highly

246
00:10:39.387 --> 00:10:42.077
secure applications. Milestone

247
00:10:42.087 --> 00:10:44.967
setting. Milestone setting in a tool

248
00:10:44.977 --> 00:10:47.507
is a great means to track issues, improve

249
00:10:47.517 --> 00:10:49.987
on a series of issues, and draw requests

250
00:10:49.997 --> 00:10:52.907
in a repository. You can easily assign

251
00:10:52.917 --> 00:10:55.327
project milestones to any issue or

252
00:10:55.337 --> 00:10:57.547
combine requests in that project barely

253
00:10:57.557 --> 00:11:00.247
or assign group milestones to issues or

254
00:11:00.257 --> 00:11:02.487
combined requests of any project in the

255
00:11:02.497 --> 00:11:04.917
group. Code reviews and merge

256
00:11:04.927 --> 00:11:07.917
Requests, GitLab CICD

257
00:11:07.927 --> 00:11:10.207
is not only used for building code, but

258
00:11:10.217 --> 00:11:12.407
to scrutinize or review code as well.

259
00:11:13.127 --> 00:11:15.397
Allows improved collaboration with easy

260
00:11:15.407 --> 00:11:17.506
merge requests and mergers management

261
00:11:17.516 --> 00:11:20.196
systems. There is support for more or

262
00:11:20.206 --> 00:11:22.336
less all version control systems and

263
00:11:22.346 --> 00:11:25.166
build environments, issue tracking and

264
00:11:25.176 --> 00:11:28.026
issue shuffling. Due to its great tissue

265
00:11:28.036 --> 00:11:30.186
tracking and issue shuffling features,

266
00:11:30.296 --> 00:11:33.066
GitLab is a preferred CICD tool for

267
00:11:33.076 --> 00:11:35.826
numerous open source projects. It

268
00:11:35.836 --> 00:11:37.786
smartly allows parallel test pull

269
00:11:37.796 --> 00:11:40.786
requests and branches. For simple and

270
00:11:40.796 --> 00:11:42.866
trouble free monitoring, the testing

271
00:11:42.876 --> 00:11:45.526
outcomes are displayed on the GitHub UI

272
00:11:46.096 --> 00:11:48.646
Jekyll Plugin support. Jekyll

273
00:11:48.656 --> 00:11:51.166
plugin is a static website generator with

274
00:11:51.176 --> 00:11:53.406
great support for GitHub Pages and it

275
00:11:53.416 --> 00:11:56.166
makes the build process simpler. Jekyll

276
00:11:56.176 --> 00:11:58.946
plugins support takes HTML files and

277
00:11:58.956 --> 00:12:01.386
mark down and creates a completely static

278
00:12:01.396 --> 00:12:03.906
site based on your preference of layouts.

279
00:12:05.256 --> 00:12:07.665
You need to install and register runner

280
00:12:07.675 --> 00:12:10.445
for the project. Define the CICD

281
00:12:10.455 --> 00:12:12.605
jobs in a structured order and with well

282
00:12:12.615 --> 00:12:15.005
defined actions if certain conditions are

283
00:12:15.015 --> 00:12:17.955
met while executing these jobs, save

284
00:12:17.965 --> 00:12:20.825
this yaml file as a gitlab-ci.yml

285
00:12:20.835 --> 00:12:23.825
file in the root directory

286
00:12:23.835 --> 00:12:26.085
of the project. When you push config

287
00:12:26.095 --> 00:12:28.585
files to the repository, the runner runs

288
00:12:28.595 --> 00:12:31.265
these specified jobs. Usually a

289
00:12:31.275 --> 00:12:34.245
GitLab CICD pipeline would contain full

290
00:12:34.255 --> 00:12:37.215
stages. Build, Test Staggering

291
00:12:37.285 --> 00:12:40.005
and Production. If the code commit passes

292
00:12:40.015 --> 00:12:42.405
all these stages, it is successfully

293
00:12:42.415 --> 00:12:45.365
delivered/deployed. Let us

294
00:12:45.375 --> 00:12:48.205
discuss on CICD as a service.

295
00:12:51.035 --> 00:12:53.455
Let us discuss on. Azure

296
00:12:53.465 --> 00:12:55.735
pipelines, AWS

297
00:12:55.745 --> 00:12:58.694
pipelines, Bitbucket pipelines,

298
00:12:59.284 --> 00:13:00.994
Gitlab pipelines.

299
00:13:02.164 --> 00:13:04.624
As more software development teams aim to

300
00:13:04.634 --> 00:13:06.544
meet the growing demand for faster

301
00:13:06.554 --> 00:13:08.804
release cycles and increased software

302
00:13:08.814 --> 00:13:11.184
quality, many are looking to implement a

303
00:13:11.194 --> 00:13:13.124
continuous development pipeline to

304
00:13:13.134 --> 00:13:15.904
streamline their process. Adopting

305
00:13:15.914 --> 00:13:18.864
CICID practices enable teams to adapt

306
00:13:18.874 --> 00:13:20.964
their software on demand to meet user

307
00:13:20.974 --> 00:13:23.504
feedback, market shifts, and any

308
00:13:23.514 --> 00:13:25.534
adjustments to the overarching business

309
00:13:25.544 --> 00:13:28.124
strategy. Pipeline is a runnable

310
00:13:28.134 --> 00:13:30.264
specification of steps that reduce the

311
00:13:30.274 --> 00:13:32.604
developer's manual work by delivering a

312
00:13:32.614 --> 00:13:34.904
new version of software productively and

313
00:13:34.914 --> 00:13:37.704
saves time. CICD

314
00:13:37.714 --> 00:13:39.964
pipeline is used to automate the process

315
00:13:39.974 --> 00:13:42.384
of continuous integration and continuous

316
00:13:42.394 --> 00:13:45.304
deployment. The pipeline facilitates the

317
00:13:45.314 --> 00:13:47.823
software delivery process via stages like

318
00:13:47.833 --> 00:13:50.363
build, test, merge and deploy.

319
00:13:51.733 --> 00:13:54.343
The following are the stages of CICD

320
00:13:54.353 --> 00:13:57.023
pipeline. Source stage. In

321
00:13:57.033 --> 00:13:59.803
most cases a pipeline run is triggered by

322
00:13:59.813 --> 00:14:02.803
a source code repository. A change in

323
00:14:02.813 --> 00:14:05.723
code triggers a notification to the CICD

324
00:14:05.733 --> 00:14:07.713
tool which runs the corresponding

325
00:14:07.723 --> 00:14:10.683
pipeline. Build stage. The

326
00:14:10.693 --> 00:14:12.703
source code and its dependencies are

327
00:14:12.713 --> 00:14:14.773
combined to build a runnable instance of

328
00:14:14.783 --> 00:14:16.923
the product that can be potentially

329
00:14:16.933 --> 00:14:19.543
shipped to the end users. Programs

330
00:14:19.553 --> 00:14:22.263
written in languages such as Java, C or

331
00:14:22.273 --> 00:14:24.943
C++ or Go need to be compiled,

332
00:14:25.003 --> 00:14:27.623
whereas Ruby, Python, and JavaScript

333
00:14:27.633 --> 00:14:29.963
programs work without this step.

334
00:14:30.213 --> 00:14:32.663
Regardless of the language. Cloud native

335
00:14:32.673 --> 00:14:34.423
software is typically deployed with

336
00:14:34.433 --> 00:14:36.803
Docker, in which case the stage of the C

337
00:14:36.813 --> 00:14:38.822
ICD pipeline builds the Docker

338
00:14:38.832 --> 00:14:41.572
containers. Failure to pass the build

339
00:14:41.582 --> 00:14:43.732
stage is an indicator of a fundamental

340
00:14:43.742 --> 00:14:46.272
problem in the projects configuration and

341
00:14:46.282 --> 00:14:48.992
it's best to address it immediately. Test

342
00:14:49.002 --> 00:14:51.672
Stage. In this phase we run

343
00:14:51.682 --> 00:14:53.992
automated tests to validate our codes

344
00:14:54.002 --> 00:14:55.912
correctness and the behavior of our

345
00:14:55.922 --> 00:14:58.872
product. The test stage prevents easily

346
00:14:58.882 --> 00:15:01.052
reproducible bugs from reaching the end

347
00:15:01.062 --> 00:15:03.952
users. The responsibility of writing

348
00:15:03.962 --> 00:15:06.852
tests falls on the developers depending

349
00:15:06.862 --> 00:15:09.412
on the size and complexity of the project

350
00:15:09.462 --> 00:15:11.462
this phase. And last from seconds to

351
00:15:11.472 --> 00:15:14.422
hours. Many large scale projects run

352
00:15:14.432 --> 00:15:17.082
tests in multiple stages. It is

353
00:15:17.092 --> 00:15:19.002
essential for this stage to produce

354
00:15:19.012 --> 00:15:21.822
feedback to developers. Quickly deploy

355
00:15:21.832 --> 00:15:24.662
stage. Once we have a built a runnable

356
00:15:24.672 --> 00:15:27.062
instance of our code that has passed all

357
00:15:27.072 --> 00:15:29.601
predefined tests, we have to deploy it.

358
00:15:30.171 --> 00:15:31.911
There are usually multiple deploy

359
00:15:31.921 --> 00:15:34.871
environments. For example, a beta

360
00:15:34.881 --> 00:15:37.171
or staging environment which is used

361
00:15:37.181 --> 00:15:39.231
internally by the product team, and a

362
00:15:39.241 --> 00:15:41.571
production environment for end users.

363
00:15:42.141 --> 00:15:44.431
Teams that have embraced the agile model

364
00:15:44.441 --> 00:15:46.611
of development deploy work in progress

365
00:15:46.621 --> 00:15:48.971
manually to a staging environment for

366
00:15:48.981 --> 00:15:51.431
additional manual testing and review, and

367
00:15:51.441 --> 00:15:53.511
automatically deploy approved changes

368
00:15:53.521 --> 00:15:55.501
from the master branch to production.

369
00:15:56.911 --> 00:15:58.821
Azure DevOps is a collection of

370
00:15:58.831 --> 00:16:01.461
services given by Microsoft Azure.

371
00:16:01.751 --> 00:16:03.861
It provides development services for a

372
00:16:03.871 --> 00:16:06.591
team to support, plan, collaborate,

373
00:16:06.631 --> 00:16:09.241
build and deploy applications. It

374
00:16:09.251 --> 00:16:11.841
provides integrated features in a browser

375
00:16:11.971 --> 00:16:14.481
or an IDE, integrated development

376
00:16:14.491 --> 00:16:17.001
environment. Some of the services for

377
00:16:17.011 --> 00:16:19.940
developers are Azure Repos, Azure

378
00:16:19.950 --> 00:16:22.780
Pipelines, Azure Boards,

379
00:16:22.790 --> 00:16:25.590
Azure test plans, Azure artifacts,

380
00:16:25.890 --> 00:16:28.090
these resources are quite useful,

381
00:16:28.140 --> 00:16:29.960
especially as your pipelines.

382
00:16:31.180 --> 00:16:34.020
Azure Pipeline is a cloud service that we

383
00:16:34.030 --> 00:16:36.330
can use to build and test our code

384
00:16:36.340 --> 00:16:38.870
project automatically. The Azure

385
00:16:38.880 --> 00:16:41.490
pipeline has a lot of capabilities such

386
00:16:41.500 --> 00:16:44.190
as continuous integration and continuous

387
00:16:44.200 --> 00:16:46.730
delivery to regularly and consistently

388
00:16:46.740 --> 00:16:49.370
test and build our code and ship to any

389
00:16:49.380 --> 00:16:52.170
target Azure pipelines off For cloud

390
00:16:52.180 --> 00:16:55.050
hosted pipelines for Linux, Mac OS,

391
00:16:55.140 --> 00:16:58.030
and Windows. Build and release pipelines

392
00:16:58.140 --> 00:17:00.770
can be defined using YAML, yet another

393
00:17:00.780 --> 00:17:03.780
markup language. The following are

394
00:17:03.790 --> 00:17:06.090
the advantages of Azure Pipelines.

395
00:17:06.740 --> 00:17:09.489
Version control systems. Having the

396
00:17:09.499 --> 00:17:11.829
code into a version control system is the

397
00:17:11.839 --> 00:17:14.789
first step of building an Azure CICD

398
00:17:14.799 --> 00:17:17.469
pipeline. You can manage your source

399
00:17:17.479 --> 00:17:20.349
code in GitHub, Bitbucket, Subversion,

400
00:17:20.399 --> 00:17:23.029
or any other Git repository. It

401
00:17:23.039 --> 00:17:25.409
also supports Team Foundation version

402
00:17:25.419 --> 00:17:28.279
control, TFVC programming

403
00:17:28.289 --> 00:17:31.229
languages and application types. You

404
00:17:31.239 --> 00:17:33.409
can use different languages with Azure

405
00:17:33.419 --> 00:17:35.549
Pipelines like Java, Ruby,

406
00:17:35.619 --> 00:17:38.229
C, Python,

407
00:17:38.399 --> 00:17:41.169
PHP, Go and JavaScript

408
00:17:41.719 --> 00:17:44.249
deployment targets. The applications with

409
00:17:44.259 --> 00:17:47.129
Azure CICD pipelines can be deployed to

410
00:17:47.139 --> 00:17:49.729
multiple target environments. This

411
00:17:49.739 --> 00:17:52.609
includes virtual machines, containers or

412
00:17:52.619 --> 00:17:54.879
any on premises or cloud platform.

413
00:17:55.549 --> 00:17:58.319
Pricing. It is free for public projects,

414
00:17:58.888 --> 00:18:01.838
but for private projects you can run up

415
00:18:01.848 --> 00:18:04.778
to 1800 minutes of pipeline jobs free

416
00:18:04.788 --> 00:18:07.438
per month. Follow the basic

417
00:18:07.448 --> 00:18:10.338
steps. Configure as your pipelines to use

418
00:18:10.348 --> 00:18:13.178
your git repo. Edit your azure-pipelines.yml

419
00:18:13.398 --> 00:18:16.318
file to define your build. Push

420
00:18:16.328 --> 00:18:18.218
your code to your version control

421
00:18:18.228 --> 00:18:20.788
repository. This action kicks off the

422
00:18:20.798 --> 00:18:23.208
default trigger to build and deploy and

423
00:18:23.218 --> 00:18:25.798
then monitor the results. Your code is

424
00:18:25.808 --> 00:18:28.498
now updated, built, tested and

425
00:18:28.508 --> 00:18:30.918
packaged. It can be deployed to any

426
00:18:30.928 --> 00:18:33.898
target. Follow these basic

427
00:18:33.908 --> 00:18:36.698
steps. Configure as your pipelines

428
00:18:36.768 --> 00:18:39.398
to use your Git repo. Use the Azure

429
00:18:39.408 --> 00:18:41.798
Pipelines classic editor to create and

430
00:18:41.808 --> 00:18:43.688
configure your build and release

431
00:18:43.698 --> 00:18:46.578
pipelines. Push your code to your version

432
00:18:46.588 --> 00:18:49.557
control repository. This action triggers

433
00:18:49.567 --> 00:18:51.957
your pipeline and runs tasks such as

434
00:18:51.967 --> 00:18:54.177
building or testing code. The build

435
00:18:54.187 --> 00:18:56.937
creates an artifact that is used by the

436
00:18:56.947 --> 00:18:59.467
rest of your pipeline to run tasks such

437
00:18:59.477 --> 00:19:01.737
as deploying to staging or production

438
00:19:02.047 --> 00:19:04.637
your code. Is now updated, built,

439
00:19:04.707 --> 00:19:07.577
tested and packaged. It can be deployed

440
00:19:07.587 --> 00:19:10.437
to any target. The steps for

441
00:19:10.447 --> 00:19:12.987
building as your CICD pipeline and

442
00:19:12.997 --> 00:19:14.997
the prerequisites is specified here.

443
00:19:16.117 --> 00:19:18.397
Having completed this module, you would

444
00:19:18.407 --> 00:19:21.287
have gained knowledge on. CICD

445
00:19:21.337 --> 00:19:23.927
Tools and CICD as a Service.

446
00:19:25.337 --> 00:19:27.487
Thank you, have a happy learning.
